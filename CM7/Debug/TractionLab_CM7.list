
TractionLab_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005924  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf4  08005bf4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bfc  08005bfc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08005c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  24000010  08005c14  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000158  08005c14  00020158  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138e9  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002054  00000000  00000000  00033927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00035980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00036870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039d7e  00000000  00000000  000376a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012973  00000000  00000000  00071426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00185632  00000000  00000000  00083d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002093cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f48  00000000  00000000  0020941c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005ba4 	.word	0x08005ba4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005ba4 	.word	0x08005ba4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	60bb      	str	r3, [r7, #8]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b5c      	ldr	r3, [pc, #368]	; (8000888 <main+0x180>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	60ba      	str	r2, [r7, #8]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 fa99 	bl	8000c68 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fc0f 	bl	8000f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f8b1 	bl	80008a0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b52      	ldr	r3, [pc, #328]	; (8000888 <main+0x180>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a50      	ldr	r2, [pc, #320]	; (8000888 <main+0x180>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b4e      	ldr	r3, [pc, #312]	; (8000888 <main+0x180>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 ff6b 	bl	8001638 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 ff81 	bl	800166c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	60bb      	str	r3, [r7, #8]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b45      	ldr	r3, [pc, #276]	; (8000888 <main+0x180>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	60ba      	str	r2, [r7, #8]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 fa6b 	bl	8000c68 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f9e7 	bl	8000b64 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f999 	bl	8000acc <MX_USART3_UART_Init>
  MX_TIM13_Init();
 800079a:	f000 f8fb 	bl	8000994 <MX_TIM13_Init>
  MX_TIM14_Init();
 800079e:	f000 f947 	bl	8000a30 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */


  if (HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1) != HAL_OK) {
 80007a2:	2100      	movs	r1, #0
 80007a4:	4839      	ldr	r0, [pc, #228]	; (800088c <main+0x184>)
 80007a6:	f003 fba9 	bl	8003efc <HAL_TIM_PWM_Start>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d01f      	beq.n	80007f0 <main+0xe8>
	  Error_Handler();
 80007b0:	f000 fa5a 	bl	8000c68 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Backward
	  while(setpoint*100 < 101){
 80007b4:	e01c      	b.n	80007f0 <main+0xe8>
		  setpoint += 0.01f;
 80007b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80007ba:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000890 <main+0x188>
 80007be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007c2:	edc7 7a03 	vstr	s15, [r7, #12]
		  TIM14->CCR1 = (uint32_t)((63999*0.05)+(63999*0.05*setpoint));
 80007c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80007ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ce:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000880 <main+0x178>
 80007d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007d6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000880 <main+0x178>
 80007da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <main+0x18c>)
 80007e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007e4:	ee17 2a90 	vmov	r2, s15
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(100);
 80007ea:	2064      	movs	r0, #100	; 0x64
 80007ec:	f000 fc46 	bl	800107c <HAL_Delay>
	  while(setpoint*100 < 101){
 80007f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80007f4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000898 <main+0x190>
 80007f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007fc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800089c <main+0x194>
 8000800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000808:	d4d5      	bmi.n	80007b6 <main+0xae>
	  }
	  setpoint = 0.5f;
 800080a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800080e:	60fb      	str	r3, [r7, #12]
	  HAL_Delay(2000);
 8000810:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000814:	f000 fc32 	bl	800107c <HAL_Delay>
	  // Forward
	  while(setpoint*100 > -1){
 8000818:	e01c      	b.n	8000854 <main+0x14c>
		  setpoint -= 0.01f;
 800081a:	edd7 7a03 	vldr	s15, [r7, #12]
 800081e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000890 <main+0x188>
 8000822:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000826:	edc7 7a03 	vstr	s15, [r7, #12]
		  TIM14->CCR1 = (uint32_t)((63999*0.05)+(63999*0.05*setpoint));
 800082a:	edd7 7a03 	vldr	s15, [r7, #12]
 800082e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000832:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000880 <main+0x178>
 8000836:	ee27 7b06 	vmul.f64	d7, d7, d6
 800083a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000880 <main+0x178>
 800083e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <main+0x18c>)
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee17 2a90 	vmov	r2, s15
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(100);
 800084e:	2064      	movs	r0, #100	; 0x64
 8000850:	f000 fc14 	bl	800107c <HAL_Delay>
	  while(setpoint*100 > -1){
 8000854:	edd7 7a03 	vldr	s15, [r7, #12]
 8000858:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000898 <main+0x190>
 800085c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000860:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086c:	dcd5      	bgt.n	800081a <main+0x112>
	  }
	  setpoint = 0.5f;
 800086e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000872:	60fb      	str	r3, [r7, #12]
	  HAL_Delay(2000);
 8000874:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000878:	f000 fc00 	bl	800107c <HAL_Delay>
	  while(setpoint*100 < 101){
 800087c:	e7b8      	b.n	80007f0 <main+0xe8>
 800087e:	bf00      	nop
 8000880:	66666667 	.word	0x66666667
 8000884:	40a8ffe6 	.word	0x40a8ffe6
 8000888:	58024400 	.word	0x58024400
 800088c:	24000078 	.word	0x24000078
 8000890:	3c23d70a 	.word	0x3c23d70a
 8000894:	40002000 	.word	0x40002000
 8000898:	42c80000 	.word	0x42c80000
 800089c:	42ca0000 	.word	0x42ca0000

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b09c      	sub	sp, #112	; 0x70
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	224c      	movs	r2, #76	; 0x4c
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 f970 	bl	8005b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2220      	movs	r2, #32
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f005 f96a 	bl	8005b94 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008c0:	2004      	movs	r0, #4
 80008c2:	f000 fee7 	bl	8001694 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b30      	ldr	r3, [pc, #192]	; (800098c <SystemClock_Config+0xec>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a2f      	ldr	r2, [pc, #188]	; (800098c <SystemClock_Config+0xec>)
 80008d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b2d      	ldr	r3, [pc, #180]	; (800098c <SystemClock_Config+0xec>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <SystemClock_Config+0xf0>)
 80008e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e4:	4a2a      	ldr	r2, [pc, #168]	; (8000990 <SystemClock_Config+0xf0>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008ec:	4b28      	ldr	r3, [pc, #160]	; (8000990 <SystemClock_Config+0xf0>)
 80008ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f8:	bf00      	nop
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <SystemClock_Config+0xec>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000906:	d1f8      	bne.n	80008fa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000908:	2301      	movs	r3, #1
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800090c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000916:	2302      	movs	r3, #2
 8000918:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800091e:	23f0      	movs	r3, #240	; 0xf0
 8000920:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000922:	2302      	movs	r3, #2
 8000924:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800092e:	2308      	movs	r3, #8
 8000930:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000932:	2300      	movs	r3, #0
 8000934:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4618      	mov	r0, r3
 8000940:	f000 ff02 	bl	8001748 <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800094a:	f000 f98d 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	233f      	movs	r3, #63	; 0x3f
 8000950:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2303      	movs	r3, #3
 8000954:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800095a:	2308      	movs	r3, #8
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800095e:	2340      	movs	r3, #64	; 0x40
 8000960:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000962:	2340      	movs	r3, #64	; 0x40
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2104      	movs	r1, #4
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fb15 	bl	8001fa4 <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000980:	f000 f972 	bl	8000c68 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3770      	adds	r7, #112	; 0x70
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	58024800 	.word	0x58024800
 8000990:	58000400 	.word	0x58000400

08000994 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
 80009a8:	615a      	str	r2, [r3, #20]
 80009aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_TIM13_Init+0x94>)
 80009ae:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <MX_TIM13_Init+0x98>)
 80009b0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 73;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_TIM13_Init+0x94>)
 80009b4:	2249      	movs	r2, #73	; 0x49
 80009b6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_TIM13_Init+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 64863;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_TIM13_Init+0x94>)
 80009c0:	f64f 525f 	movw	r2, #64863	; 0xfd5f
 80009c4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_TIM13_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_TIM13_Init+0x94>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80009d2:	4815      	ldr	r0, [pc, #84]	; (8000a28 <MX_TIM13_Init+0x94>)
 80009d4:	f003 f9da 	bl	8003d8c <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80009de:	f000 f943 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80009e2:	4811      	ldr	r0, [pc, #68]	; (8000a28 <MX_TIM13_Init+0x94>)
 80009e4:	f003 fa29 	bl	8003e3a <HAL_TIM_PWM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80009ee:	f000 f93b 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f2:	2360      	movs	r3, #96	; 0x60
 80009f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	4807      	ldr	r0, [pc, #28]	; (8000a28 <MX_TIM13_Init+0x94>)
 8000a0a:	f003 fb85 	bl	8004118 <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000a14:	f000 f928 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <MX_TIM13_Init+0x94>)
 8000a1a:	f000 f97f 	bl	8000d1c <HAL_TIM_MspPostInit>

}
 8000a1e:	bf00      	nop
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2400002c 	.word	0x2400002c
 8000a2c:	40001c00 	.word	0x40001c00

08000a30 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <MX_TIM14_Init+0x94>)
 8000a4a:	4a1f      	ldr	r2, [pc, #124]	; (8000ac8 <MX_TIM14_Init+0x98>)
 8000a4c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 74;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_TIM14_Init+0x94>)
 8000a50:	224a      	movs	r2, #74	; 0x4a
 8000a52:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_TIM14_Init+0x94>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 63999;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_TIM14_Init+0x94>)
 8000a5c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a60:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_TIM14_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_TIM14_Init+0x94>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a6e:	4815      	ldr	r0, [pc, #84]	; (8000ac4 <MX_TIM14_Init+0x94>)
 8000a70:	f003 f98c 	bl	8003d8c <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000a7a:	f000 f8f5 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000a7e:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <MX_TIM14_Init+0x94>)
 8000a80:	f003 f9db 	bl	8003e3a <HAL_TIM_PWM_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000a8a:	f000 f8ed 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8e:	2360      	movs	r3, #96	; 0x60
 8000a90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <MX_TIM14_Init+0x94>)
 8000aa6:	f003 fb37 	bl	8004118 <HAL_TIM_PWM_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000ab0:	f000 f8da 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <MX_TIM14_Init+0x94>)
 8000ab6:	f000 f931 	bl	8000d1c <HAL_TIM_MspPostInit>

}
 8000aba:	bf00      	nop
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	24000078 	.word	0x24000078
 8000ac8:	40002000 	.word	0x40002000

08000acc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000ad2:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <MX_USART3_UART_Init+0x94>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000ad8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000adc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b14:	4811      	ldr	r0, [pc, #68]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b16:	f003 ffa8 	bl	8004a6a <HAL_UART_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b20:	f000 f8a2 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b28:	f004 ff46 	bl	80059b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b32:	f000 f899 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4808      	ldr	r0, [pc, #32]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b3a:	f004 ff7b 	bl	8005a34 <HAL_UARTEx_SetRxFifoThreshold>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b44:	f000 f890 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_USART3_UART_Init+0x90>)
 8000b4a:	f004 fefc 	bl	8005946 <HAL_UARTEx_DisableFifoMode>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b54:	f000 f888 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	240000c4 	.word	0x240000c4
 8000b60:	40004800 	.word	0x40004800

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b38      	ldr	r3, [pc, #224]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	4a36      	ldr	r2, [pc, #216]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b98:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	4a2f      	ldr	r2, [pc, #188]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000ba0:	f043 0320 	orr.w	r3, r3, #32
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	f003 0320 	and.w	r3, r3, #32
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a20      	ldr	r2, [pc, #128]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c16:	4812      	ldr	r0, [pc, #72]	; (8000c60 <MX_GPIO_Init+0xfc>)
 8000c18:	f000 fcf4 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <MX_GPIO_Init+0x100>)
 8000c32:	f000 fb37 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4804      	ldr	r0, [pc, #16]	; (8000c60 <MX_GPIO_Init+0xfc>)
 8000c50:	f000 fb28 	bl	80012a4 <HAL_GPIO_Init>

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58020400 	.word	0x58020400
 8000c64:	58020800 	.word	0x58020800

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_MspInit+0x30>)
 8000c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c80:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x30>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x30>)
 8000c8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	58024400 	.word	0x58024400

08000ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <HAL_TIM_Base_MspInit+0x68>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d10f      	bne.n	8000cda <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_TIM_Base_MspInit+0x6c>)
 8000cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cc0:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <HAL_TIM_Base_MspInit+0x6c>)
 8000cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_TIM_Base_MspInit+0x6c>)
 8000ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000cd8:	e013      	b.n	8000d02 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <HAL_TIM_Base_MspInit+0x70>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d10e      	bne.n	8000d02 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_TIM_Base_MspInit+0x6c>)
 8000ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_TIM_Base_MspInit+0x6c>)
 8000cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <HAL_TIM_Base_MspInit+0x6c>)
 8000cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40001c00 	.word	0x40001c00
 8000d14:	58024400 	.word	0x58024400
 8000d18:	40002000 	.word	0x40002000

08000d1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a26      	ldr	r2, [pc, #152]	; (8000dd4 <HAL_TIM_MspPostInit+0xb8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d120      	bne.n	8000d80 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_TIM_MspPostInit+0xbc>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	4a24      	ldr	r2, [pc, #144]	; (8000dd8 <HAL_TIM_MspPostInit+0xbc>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <HAL_TIM_MspPostInit+0xbc>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000d6e:	2309      	movs	r3, #9
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4818      	ldr	r0, [pc, #96]	; (8000ddc <HAL_TIM_MspPostInit+0xc0>)
 8000d7a:	f000 fa93 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000d7e:	e024      	b.n	8000dca <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <HAL_TIM_MspPostInit+0xc4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d11f      	bne.n	8000dca <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_TIM_MspPostInit+0xbc>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <HAL_TIM_MspPostInit+0xbc>)
 8000d92:	f043 0320 	orr.w	r3, r3, #32
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_TIM_MspPostInit+0xbc>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	f003 0320 	and.w	r3, r3, #32
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Pin;
 8000da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000dba:	2309      	movs	r3, #9
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_TIM_MspPostInit+0xc0>)
 8000dc6:	f000 fa6d 	bl	80012a4 <HAL_GPIO_Init>
}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40001c00 	.word	0x40001c00
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58021400 	.word	0x58021400
 8000de0:	40002000 	.word	0x40002000

08000de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0b8      	sub	sp, #224	; 0xe0
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	22bc      	movs	r2, #188	; 0xbc
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f004 fec5 	bl	8005b94 <memset>
  if(huart->Instance==USART3)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a25      	ldr	r2, [pc, #148]	; (8000ea4 <HAL_UART_MspInit+0xc0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d142      	bne.n	8000e9a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e14:	2302      	movs	r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fc4a 	bl	80026bc <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e2e:	f7ff ff1b 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_UART_MspInit+0xc4>)
 8000e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e38:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <HAL_UART_MspInit+0xc4>)
 8000e3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_UART_MspInit+0xc4>)
 8000e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_UART_MspInit+0xc4>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <HAL_UART_MspInit+0xc4>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_UART_MspInit+0xc4>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_UART_MspInit+0xc8>)
 8000e96:	f000 fa05 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	37e0      	adds	r7, #224	; 0xe0
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004800 	.word	0x40004800
 8000ea8:	58024400 	.word	0x58024400
 8000eac:	58020c00 	.word	0x58020c00

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f89e 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f08:	f7ff fb68 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f0e:	490d      	ldr	r1, [pc, #52]	; (8000f44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f24:	4c0a      	ldr	r4, [pc, #40]	; (8000f50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f32:	f004 fe0b 	bl	8005b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f36:	f7ff fbe7 	bl	8000708 <main>
  bx  lr
 8000f3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f40:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f44:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f48:	08005c04 	.word	0x08005c04
  ldr r2, =_sbss
 8000f4c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000f50:	24000158 	.word	0x24000158

08000f54 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC3_IRQHandler>
	...

08000f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5e:	2003      	movs	r0, #3
 8000f60:	f000 f96e 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f64:	f001 f9d4 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_Init+0x68>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	4913      	ldr	r1, [pc, #76]	; (8000fc4 <HAL_Init+0x6c>)
 8000f76:	5ccb      	ldrb	r3, [r1, r3]
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_Init+0x68>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_Init+0x6c>)
 8000f8c:	5cd3      	ldrb	r3, [r2, r3]
 8000f8e:	f003 031f 	and.w	r3, r3, #31
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <HAL_Init+0x70>)
 8000f9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <HAL_Init+0x74>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f000 f814 	bl	8000fd0 <HAL_InitTick>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e002      	b.n	8000fb8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb2:	f7ff fe5f 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	08005bbc 	.word	0x08005bbc
 8000fc8:	24000004 	.word	0x24000004
 8000fcc:	24000000 	.word	0x24000000

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_InitTick+0x60>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e021      	b.n	8001028 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_InitTick+0x64>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_InitTick+0x60>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f945 	bl	800128a <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f91d 	bl	8001256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x68>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2400000c 	.word	0x2400000c
 8001034:	24000000 	.word	0x24000000
 8001038:	24000008 	.word	0x24000008

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2400000c 	.word	0x2400000c
 8001060:	24000154 	.word	0x24000154

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	24000154 	.word	0x24000154

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2400000c 	.word	0x2400000c

080010c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetREVID+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	0c1b      	lsrs	r3, r3, #16
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	5c001000 	.word	0x5c001000

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <__NVIC_SetPriorityGrouping+0x40>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	4313      	orrs	r3, r2
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <__NVIC_SetPriorityGrouping+0x40>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	05fa0000 	.word	0x05fa0000

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	; (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f7ff ff8e 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff47 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff5e 	bl	8001124 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff90 	bl	8001194 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5f 	bl	8001140 <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffb2 	bl	80011fc <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012b2:	4b89      	ldr	r3, [pc, #548]	; (80014d8 <HAL_GPIO_Init+0x234>)
 80012b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012b6:	e194      	b.n	80015e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8186 	beq.w	80015dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d005      	beq.n	80012e8 <HAL_GPIO_Init+0x44>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d130      	bne.n	800134a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131e:	2201      	movs	r2, #1
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f003 0201 	and.w	r2, r3, #1
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b03      	cmp	r3, #3
 8001354:	d017      	beq.n	8001386 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d123      	bne.n	80013da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	08da      	lsrs	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3208      	adds	r2, #8
 800139a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	220f      	movs	r2, #15
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	69b9      	ldr	r1, [r7, #24]
 80013d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0203 	and.w	r2, r3, #3
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 80e0 	beq.w	80015dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <HAL_GPIO_Init+0x238>)
 800141e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001422:	4a2e      	ldr	r2, [pc, #184]	; (80014dc <HAL_GPIO_Init+0x238>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_GPIO_Init+0x238>)
 800142e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800143a:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <HAL_GPIO_Init+0x23c>)
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <HAL_GPIO_Init+0x240>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d052      	beq.n	800150c <HAL_GPIO_Init+0x268>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <HAL_GPIO_Init+0x244>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d031      	beq.n	80014d2 <HAL_GPIO_Init+0x22e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <HAL_GPIO_Init+0x248>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d02b      	beq.n	80014ce <HAL_GPIO_Init+0x22a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <HAL_GPIO_Init+0x24c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d025      	beq.n	80014ca <HAL_GPIO_Init+0x226>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a1c      	ldr	r2, [pc, #112]	; (80014f4 <HAL_GPIO_Init+0x250>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d01f      	beq.n	80014c6 <HAL_GPIO_Init+0x222>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <HAL_GPIO_Init+0x254>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0x21e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <HAL_GPIO_Init+0x258>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0x21a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a19      	ldr	r2, [pc, #100]	; (8001500 <HAL_GPIO_Init+0x25c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_Init+0x216>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a18      	ldr	r2, [pc, #96]	; (8001504 <HAL_GPIO_Init+0x260>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x212>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a17      	ldr	r2, [pc, #92]	; (8001508 <HAL_GPIO_Init+0x264>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_Init+0x20e>
 80014ae:	2309      	movs	r3, #9
 80014b0:	e02d      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014b2:	230a      	movs	r3, #10
 80014b4:	e02b      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014b6:	2308      	movs	r3, #8
 80014b8:	e029      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014ba:	2307      	movs	r3, #7
 80014bc:	e027      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014be:	2306      	movs	r3, #6
 80014c0:	e025      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014c2:	2305      	movs	r3, #5
 80014c4:	e023      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e021      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014ca:	2303      	movs	r3, #3
 80014cc:	e01f      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e01d      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e01b      	b.n	800150e <HAL_GPIO_Init+0x26a>
 80014d6:	bf00      	nop
 80014d8:	58000080 	.word	0x58000080
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58000400 	.word	0x58000400
 80014e4:	58020000 	.word	0x58020000
 80014e8:	58020400 	.word	0x58020400
 80014ec:	58020800 	.word	0x58020800
 80014f0:	58020c00 	.word	0x58020c00
 80014f4:	58021000 	.word	0x58021000
 80014f8:	58021400 	.word	0x58021400
 80014fc:	58021800 	.word	0x58021800
 8001500:	58021c00 	.word	0x58021c00
 8001504:	58022000 	.word	0x58022000
 8001508:	58022400 	.word	0x58022400
 800150c:	2300      	movs	r3, #0
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	f002 0203 	and.w	r2, r2, #3
 8001514:	0092      	lsls	r2, r2, #2
 8001516:	4093      	lsls	r3, r2
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800151e:	4938      	ldr	r1, [pc, #224]	; (8001600 <HAL_GPIO_Init+0x35c>)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	3301      	adds	r3, #1
 80015e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f47f ae63 	bne.w	80012b8 <HAL_GPIO_Init+0x14>
  }
}
 80015f2:	bf00      	nop
 80015f4:	bf00      	nop
 80015f6:	3724      	adds	r7, #36	; 0x24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	58000400 	.word	0x58000400

08001604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001640:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_HSEM_FastTake+0x2c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3320      	adds	r3, #32
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_HSEM_FastTake+0x30>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d101      	bne.n	8001654 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e000      	b.n	8001656 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	58026400 	.word	0x58026400
 8001668:	80000300 	.word	0x80000300

0800166c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001676:	4906      	ldr	r1, [pc, #24]	; (8001690 <HAL_HSEM_Release+0x24>)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	58026400 	.word	0x58026400

08001694 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800169c:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_PWREx_ConfigSupply+0xb0>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	2b06      	cmp	r3, #6
 80016a6:	d00a      	beq.n	80016be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016a8:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_PWREx_ConfigSupply+0xb0>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d001      	beq.n	80016ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e040      	b.n	800173c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e03e      	b.n	800173c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <HAL_PWREx_ConfigSupply+0xb0>)
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80016c6:	491f      	ldr	r1, [pc, #124]	; (8001744 <HAL_PWREx_ConfigSupply+0xb0>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016ce:	f7ff fcc9 	bl	8001064 <HAL_GetTick>
 80016d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016d4:	e009      	b.n	80016ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016d6:	f7ff fcc5 	bl	8001064 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e4:	d901      	bls.n	80016ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e028      	b.n	800173c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016f6:	d1ee      	bne.n	80016d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b1e      	cmp	r3, #30
 80016fc:	d008      	beq.n	8001710 <HAL_PWREx_ConfigSupply+0x7c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b2e      	cmp	r3, #46	; 0x2e
 8001702:	d005      	beq.n	8001710 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b1d      	cmp	r3, #29
 8001708:	d002      	beq.n	8001710 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b2d      	cmp	r3, #45	; 0x2d
 800170e:	d114      	bne.n	800173a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001710:	f7ff fca8 	bl	8001064 <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001716:	e009      	b.n	800172c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001718:	f7ff fca4 	bl	8001064 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001726:	d901      	bls.n	800172c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e007      	b.n	800173c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_PWREx_ConfigSupply+0xb0>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001738:	d1ee      	bne.n	8001718 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	58024800 	.word	0x58024800

08001748 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	; 0x30
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	f000 bc1d 	b.w	8001f96 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 8087 	beq.w	8001878 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176a:	4b99      	ldr	r3, [pc, #612]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001774:	4b96      	ldr	r3, [pc, #600]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	2b10      	cmp	r3, #16
 800177e:	d007      	beq.n	8001790 <HAL_RCC_OscConfig+0x48>
 8001780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001782:	2b18      	cmp	r3, #24
 8001784:	d110      	bne.n	80017a8 <HAL_RCC_OscConfig+0x60>
 8001786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d10b      	bne.n	80017a8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	4b8f      	ldr	r3, [pc, #572]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d06c      	beq.n	8001876 <HAL_RCC_OscConfig+0x12e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d168      	bne.n	8001876 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e3f6      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d106      	bne.n	80017c0 <HAL_RCC_OscConfig+0x78>
 80017b2:	4b87      	ldr	r3, [pc, #540]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a86      	ldr	r2, [pc, #536]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e02e      	b.n	800181e <HAL_RCC_OscConfig+0xd6>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x9a>
 80017c8:	4b81      	ldr	r3, [pc, #516]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a80      	ldr	r2, [pc, #512]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80017ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b7e      	ldr	r3, [pc, #504]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a7d      	ldr	r2, [pc, #500]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80017da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e01d      	b.n	800181e <HAL_RCC_OscConfig+0xd6>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0xbe>
 80017ec:	4b78      	ldr	r3, [pc, #480]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a77      	ldr	r2, [pc, #476]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80017f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b75      	ldr	r3, [pc, #468]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a74      	ldr	r2, [pc, #464]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e00b      	b.n	800181e <HAL_RCC_OscConfig+0xd6>
 8001806:	4b72      	ldr	r3, [pc, #456]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a71      	ldr	r2, [pc, #452]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6e      	ldr	r2, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d013      	beq.n	800184e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff fc1d 	bl	8001064 <HAL_GetTick>
 800182a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182e:	f7ff fc19 	bl	8001064 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e3aa      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001840:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0xe6>
 800184c:	e014      	b.n	8001878 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff fc09 	bl	8001064 <HAL_GetTick>
 8001852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001856:	f7ff fc05 	bl	8001064 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b64      	cmp	r3, #100	; 0x64
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e396      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001868:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x10e>
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001876:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80cb 	beq.w	8001a1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001886:	4b52      	ldr	r3, [pc, #328]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800188e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001890:	4b4f      	ldr	r3, [pc, #316]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_RCC_OscConfig+0x164>
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	2b18      	cmp	r3, #24
 80018a0:	d156      	bne.n	8001950 <HAL_RCC_OscConfig+0x208>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d151      	bne.n	8001950 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ac:	4b48      	ldr	r3, [pc, #288]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_OscConfig+0x17c>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e368      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018c4:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 0219 	bic.w	r2, r3, #25
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	493f      	ldr	r1, [pc, #252]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018d6:	f7ff fbc5 	bl	8001064 <HAL_GetTick>
 80018da:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018de:	f7ff fbc1 	bl	8001064 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e352      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018f0:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fc:	f7ff fbe2 	bl	80010c4 <HAL_GetREVID>
 8001900:	4603      	mov	r3, r0
 8001902:	f241 0203 	movw	r2, #4099	; 0x1003
 8001906:	4293      	cmp	r3, r2
 8001908:	d817      	bhi.n	800193a <HAL_RCC_OscConfig+0x1f2>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b40      	cmp	r3, #64	; 0x40
 8001910:	d108      	bne.n	8001924 <HAL_RCC_OscConfig+0x1dc>
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800191a:	4a2d      	ldr	r2, [pc, #180]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 800191c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001920:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001922:	e07b      	b.n	8001a1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	031b      	lsls	r3, r3, #12
 8001932:	4927      	ldr	r1, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001938:	e070      	b.n	8001a1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193a:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	061b      	lsls	r3, r3, #24
 8001948:	4921      	ldr	r1, [pc, #132]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800194e:	e065      	b.n	8001a1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d048      	beq.n	80019ea <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 0219 	bic.w	r2, r3, #25
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	491a      	ldr	r1, [pc, #104]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff fb7b 	bl	8001064 <HAL_GetTick>
 800196e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001972:	f7ff fb77 	bl	8001064 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e308      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001990:	f7ff fb98 	bl	80010c4 <HAL_GetREVID>
 8001994:	4603      	mov	r3, r0
 8001996:	f241 0203 	movw	r2, #4099	; 0x1003
 800199a:	4293      	cmp	r3, r2
 800199c:	d81a      	bhi.n	80019d4 <HAL_RCC_OscConfig+0x28c>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b40      	cmp	r3, #64	; 0x40
 80019a4:	d108      	bne.n	80019b8 <HAL_RCC_OscConfig+0x270>
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	6053      	str	r3, [r2, #4]
 80019b6:	e031      	b.n	8001a1c <HAL_RCC_OscConfig+0x2d4>
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	031b      	lsls	r3, r3, #12
 80019c6:	4902      	ldr	r1, [pc, #8]	; (80019d0 <HAL_RCC_OscConfig+0x288>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
 80019cc:	e026      	b.n	8001a1c <HAL_RCC_OscConfig+0x2d4>
 80019ce:	bf00      	nop
 80019d0:	58024400 	.word	0x58024400
 80019d4:	4b9a      	ldr	r3, [pc, #616]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	061b      	lsls	r3, r3, #24
 80019e2:	4997      	ldr	r1, [pc, #604]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e018      	b.n	8001a1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ea:	4b95      	ldr	r3, [pc, #596]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a94      	ldr	r2, [pc, #592]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff fb35 	bl	8001064 <HAL_GetTick>
 80019fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fe:	f7ff fb31 	bl	8001064 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e2c2      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a10:	4b8b      	ldr	r3, [pc, #556]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80a9 	beq.w	8001b7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2a:	4b85      	ldr	r3, [pc, #532]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a34:	4b82      	ldr	r3, [pc, #520]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d007      	beq.n	8001a50 <HAL_RCC_OscConfig+0x308>
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b18      	cmp	r3, #24
 8001a44:	d13a      	bne.n	8001abc <HAL_RCC_OscConfig+0x374>
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d135      	bne.n	8001abc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a50:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_OscConfig+0x320>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	2b80      	cmp	r3, #128	; 0x80
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e296      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a68:	f7ff fb2c 	bl	80010c4 <HAL_GetREVID>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d817      	bhi.n	8001aa6 <HAL_RCC_OscConfig+0x35e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d108      	bne.n	8001a90 <HAL_RCC_OscConfig+0x348>
 8001a7e:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a86:	4a6e      	ldr	r2, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001a88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a8c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a8e:	e075      	b.n	8001b7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a90:	4b6b      	ldr	r3, [pc, #428]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	069b      	lsls	r3, r3, #26
 8001a9e:	4968      	ldr	r1, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aa4:	e06a      	b.n	8001b7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aa6:	4b66      	ldr	r3, [pc, #408]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	061b      	lsls	r3, r3, #24
 8001ab4:	4962      	ldr	r1, [pc, #392]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aba:	e05f      	b.n	8001b7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d042      	beq.n	8001b4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ac4:	4b5e      	ldr	r3, [pc, #376]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a5d      	ldr	r2, [pc, #372]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fac8 	bl	8001064 <HAL_GetTick>
 8001ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fac4 	bl	8001064 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e255      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aea:	4b55      	ldr	r3, [pc, #340]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001af6:	f7ff fae5 	bl	80010c4 <HAL_GetREVID>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d817      	bhi.n	8001b34 <HAL_RCC_OscConfig+0x3ec>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d108      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3d6>
 8001b0c:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b14:	4a4a      	ldr	r2, [pc, #296]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b1a:	6053      	str	r3, [r2, #4]
 8001b1c:	e02e      	b.n	8001b7c <HAL_RCC_OscConfig+0x434>
 8001b1e:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	069b      	lsls	r3, r3, #26
 8001b2c:	4944      	ldr	r1, [pc, #272]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
 8001b32:	e023      	b.n	8001b7c <HAL_RCC_OscConfig+0x434>
 8001b34:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	061b      	lsls	r3, r3, #24
 8001b42:	493f      	ldr	r1, [pc, #252]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60cb      	str	r3, [r1, #12]
 8001b48:	e018      	b.n	8001b7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a3c      	ldr	r2, [pc, #240]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b56:	f7ff fa85 	bl	8001064 <HAL_GetTick>
 8001b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b5e:	f7ff fa81 	bl	8001064 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e212      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b70:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f0      	bne.n	8001b5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d036      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d019      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b94:	4a2a      	ldr	r2, [pc, #168]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fa62 	bl	8001064 <HAL_GetTick>
 8001ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fa5e 	bl	8001064 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1ef      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x45c>
 8001bc2:	e018      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fa48 	bl	8001064 <HAL_GetTick>
 8001bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fa44 	bl	8001064 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1d5      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d039      	beq.n	8001c76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d01c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c16:	f7ff fa25 	bl	8001064 <HAL_GetTick>
 8001c1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c1e:	f7ff fa21 	bl	8001064 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1b2      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x4d6>
 8001c3c:	e01b      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
 8001c3e:	bf00      	nop
 8001c40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c44:	4b9b      	ldr	r3, [pc, #620]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a9a      	ldr	r2, [pc, #616]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c50:	f7ff fa08 	bl	8001064 <HAL_GetTick>
 8001c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c58:	f7ff fa04 	bl	8001064 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e195      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c6a:	4b92      	ldr	r3, [pc, #584]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8081 	beq.w	8001d86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c84:	4b8c      	ldr	r3, [pc, #560]	; (8001eb8 <HAL_RCC_OscConfig+0x770>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a8b      	ldr	r2, [pc, #556]	; (8001eb8 <HAL_RCC_OscConfig+0x770>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c90:	f7ff f9e8 	bl	8001064 <HAL_GetTick>
 8001c94:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c98:	f7ff f9e4 	bl	8001064 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e175      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001caa:	4b83      	ldr	r3, [pc, #524]	; (8001eb8 <HAL_RCC_OscConfig+0x770>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d106      	bne.n	8001ccc <HAL_RCC_OscConfig+0x584>
 8001cbe:	4b7d      	ldr	r3, [pc, #500]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc2:	4a7c      	ldr	r2, [pc, #496]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cca:	e02d      	b.n	8001d28 <HAL_RCC_OscConfig+0x5e0>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_OscConfig+0x5a6>
 8001cd4:	4b77      	ldr	r3, [pc, #476]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd8:	4a76      	ldr	r2, [pc, #472]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce0:	4b74      	ldr	r3, [pc, #464]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	4a73      	ldr	r2, [pc, #460]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001ce6:	f023 0304 	bic.w	r3, r3, #4
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
 8001cec:	e01c      	b.n	8001d28 <HAL_RCC_OscConfig+0x5e0>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x5c8>
 8001cf6:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	4a6e      	ldr	r2, [pc, #440]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6713      	str	r3, [r2, #112]	; 0x70
 8001d02:	4b6c      	ldr	r3, [pc, #432]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	4a6b      	ldr	r2, [pc, #428]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0x5e0>
 8001d10:	4b68      	ldr	r3, [pc, #416]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	4a67      	ldr	r2, [pc, #412]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1c:	4b65      	ldr	r3, [pc, #404]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4a64      	ldr	r2, [pc, #400]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001d22:	f023 0304 	bic.w	r3, r3, #4
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d015      	beq.n	8001d5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff f998 	bl	8001064 <HAL_GetTick>
 8001d34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f7ff f994 	bl	8001064 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e123      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d4e:	4b59      	ldr	r3, [pc, #356]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0ee      	beq.n	8001d38 <HAL_RCC_OscConfig+0x5f0>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f982 	bl	8001064 <HAL_GetTick>
 8001d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7ff f97e 	bl	8001064 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e10d      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d7a:	4b4e      	ldr	r3, [pc, #312]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ee      	bne.n	8001d64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8102 	beq.w	8001f94 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d90:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d98:	2b18      	cmp	r3, #24
 8001d9a:	f000 80bd 	beq.w	8001f18 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	f040 809e 	bne.w	8001ee4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a41      	ldr	r2, [pc, #260]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f956 	bl	8001064 <HAL_GetTick>
 8001db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff f952 	bl	8001064 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e0e3      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dce:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dda:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dde:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <HAL_RCC_OscConfig+0x774>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	430a      	orrs	r2, r1
 8001dee:	4931      	ldr	r1, [pc, #196]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	628b      	str	r3, [r1, #40]	; 0x28
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e02:	3b01      	subs	r3, #1
 8001e04:	025b      	lsls	r3, r3, #9
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	041b      	lsls	r3, r3, #16
 8001e12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	061b      	lsls	r3, r3, #24
 8001e20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e24:	4923      	ldr	r1, [pc, #140]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	4a21      	ldr	r2, [pc, #132]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3a:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <HAL_RCC_OscConfig+0x778>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e42:	00d2      	lsls	r2, r2, #3
 8001e44:	491b      	ldr	r1, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	f023 020c 	bic.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4917      	ldr	r1, [pc, #92]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	f023 0202 	bic.w	r2, r3, #2
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	4912      	ldr	r1, [pc, #72]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7ff f8db 	bl	8001064 <HAL_GetTick>
 8001eae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eb0:	e011      	b.n	8001ed6 <HAL_RCC_OscConfig+0x78e>
 8001eb2:	bf00      	nop
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	58024800 	.word	0x58024800
 8001ebc:	fffffc0c 	.word	0xfffffc0c
 8001ec0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff f8ce 	bl	8001064 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e05f      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ed6:	4b32      	ldr	r3, [pc, #200]	; (8001fa0 <HAL_RCC_OscConfig+0x858>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x77c>
 8001ee2:	e057      	b.n	8001f94 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <HAL_RCC_OscConfig+0x858>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <HAL_RCC_OscConfig+0x858>)
 8001eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff f8b8 	bl	8001064 <HAL_GetTick>
 8001ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff f8b4 	bl	8001064 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e045      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f0a:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_RCC_OscConfig+0x858>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x7b0>
 8001f16:	e03d      	b.n	8001f94 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f18:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_RCC_OscConfig+0x858>)
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_RCC_OscConfig+0x858>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d031      	beq.n	8001f90 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f003 0203 	and.w	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d12a      	bne.n	8001f90 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d122      	bne.n	8001f90 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d11a      	bne.n	8001f90 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	0a5b      	lsrs	r3, r3, #9
 8001f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f66:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d111      	bne.n	8001f90 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	0c1b      	lsrs	r3, r3, #16
 8001f70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f78:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d108      	bne.n	8001f90 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0e1b      	lsrs	r3, r3, #24
 8001f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3730      	adds	r7, #48	; 0x30
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	58024400 	.word	0x58024400

08001fa4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e19c      	b.n	80022f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b8a      	ldr	r3, [pc, #552]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d910      	bls.n	8001fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b87      	ldr	r3, [pc, #540]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 020f 	bic.w	r2, r3, #15
 8001fce:	4985      	ldr	r1, [pc, #532]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b83      	ldr	r3, [pc, #524]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e184      	b.n	80022f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d010      	beq.n	8002016 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002000:	429a      	cmp	r2, r3
 8002002:	d908      	bls.n	8002016 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002004:	4b78      	ldr	r3, [pc, #480]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	4975      	ldr	r1, [pc, #468]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002012:	4313      	orrs	r3, r2
 8002014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d010      	beq.n	8002044 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	4b70      	ldr	r3, [pc, #448]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800202e:	429a      	cmp	r2, r3
 8002030:	d908      	bls.n	8002044 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002032:	4b6d      	ldr	r3, [pc, #436]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	496a      	ldr	r1, [pc, #424]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002040:	4313      	orrs	r3, r2
 8002042:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	d010      	beq.n	8002072 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699a      	ldr	r2, [r3, #24]
 8002054:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800205c:	429a      	cmp	r2, r3
 800205e:	d908      	bls.n	8002072 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002060:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	495e      	ldr	r1, [pc, #376]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 800206e:	4313      	orrs	r3, r2
 8002070:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	d010      	beq.n	80020a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	4b59      	ldr	r3, [pc, #356]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800208a:	429a      	cmp	r2, r3
 800208c:	d908      	bls.n	80020a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800208e:	4b56      	ldr	r3, [pc, #344]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4953      	ldr	r1, [pc, #332]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 800209c:	4313      	orrs	r3, r2
 800209e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d010      	beq.n	80020ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	4b4d      	ldr	r3, [pc, #308]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d908      	bls.n	80020ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b4a      	ldr	r3, [pc, #296]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f023 020f 	bic.w	r2, r3, #15
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4947      	ldr	r1, [pc, #284]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d055      	beq.n	8002186 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020da:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	4940      	ldr	r1, [pc, #256]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020f4:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d121      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0f6      	b.n	80022f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d107      	bne.n	800211c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800210c:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d115      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0ea      	b.n	80022f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d107      	bne.n	8002134 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002124:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0de      	b.n	80022f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002134:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0d6      	b.n	80022f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f023 0207 	bic.w	r2, r3, #7
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4925      	ldr	r1, [pc, #148]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002152:	4313      	orrs	r3, r2
 8002154:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7fe ff85 	bl	8001064 <HAL_GetTick>
 800215a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215c:	e00a      	b.n	8002174 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215e:	f7fe ff81 	bl	8001064 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0be      	b.n	80022f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	429a      	cmp	r2, r3
 8002184:	d1eb      	bne.n	800215e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d010      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	429a      	cmp	r2, r3
 80021a0:	d208      	bcs.n	80021b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f023 020f 	bic.w	r2, r3, #15
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	490e      	ldr	r1, [pc, #56]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d214      	bcs.n	80021ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 020f 	bic.w	r2, r3, #15
 80021ca:	4906      	ldr	r1, [pc, #24]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e086      	b.n	80022f2 <HAL_RCC_ClockConfig+0x34e>
 80021e4:	52002000 	.word	0x52002000
 80021e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d010      	beq.n	800221a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002204:	429a      	cmp	r2, r3
 8002206:	d208      	bcs.n	800221a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002208:	4b3c      	ldr	r3, [pc, #240]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	4939      	ldr	r1, [pc, #228]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 8002216:	4313      	orrs	r3, r2
 8002218:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d010      	beq.n	8002248 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002232:	429a      	cmp	r2, r3
 8002234:	d208      	bcs.n	8002248 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002236:	4b31      	ldr	r3, [pc, #196]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	492e      	ldr	r1, [pc, #184]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 8002244:	4313      	orrs	r3, r2
 8002246:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d010      	beq.n	8002276 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699a      	ldr	r2, [r3, #24]
 8002258:	4b28      	ldr	r3, [pc, #160]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002260:	429a      	cmp	r2, r3
 8002262:	d208      	bcs.n	8002276 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	4922      	ldr	r1, [pc, #136]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 8002272:	4313      	orrs	r3, r2
 8002274:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b00      	cmp	r3, #0
 8002280:	d010      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69da      	ldr	r2, [r3, #28]
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800228e:	429a      	cmp	r2, r3
 8002290:	d208      	bcs.n	80022a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4917      	ldr	r1, [pc, #92]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022a4:	f000 f834 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	4912      	ldr	r1, [pc, #72]	; (8002300 <HAL_RCC_ClockConfig+0x35c>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
 80022c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_RCC_ClockConfig+0x358>)
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <HAL_RCC_ClockConfig+0x35c>)
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <HAL_RCC_ClockConfig+0x360>)
 80022da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x364>)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_RCC_ClockConfig+0x368>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fe72 	bl	8000fd0 <HAL_InitTick>
 80022ec:	4603      	mov	r3, r0
 80022ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	58024400 	.word	0x58024400
 8002300:	08005bbc 	.word	0x08005bbc
 8002304:	24000004 	.word	0x24000004
 8002308:	24000000 	.word	0x24000000
 800230c:	24000008 	.word	0x24000008

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002316:	4bb3      	ldr	r3, [pc, #716]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800231e:	2b18      	cmp	r3, #24
 8002320:	f200 8155 	bhi.w	80025ce <HAL_RCC_GetSysClockFreq+0x2be>
 8002324:	a201      	add	r2, pc, #4	; (adr r2, 800232c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232a:	bf00      	nop
 800232c:	08002391 	.word	0x08002391
 8002330:	080025cf 	.word	0x080025cf
 8002334:	080025cf 	.word	0x080025cf
 8002338:	080025cf 	.word	0x080025cf
 800233c:	080025cf 	.word	0x080025cf
 8002340:	080025cf 	.word	0x080025cf
 8002344:	080025cf 	.word	0x080025cf
 8002348:	080025cf 	.word	0x080025cf
 800234c:	080023b7 	.word	0x080023b7
 8002350:	080025cf 	.word	0x080025cf
 8002354:	080025cf 	.word	0x080025cf
 8002358:	080025cf 	.word	0x080025cf
 800235c:	080025cf 	.word	0x080025cf
 8002360:	080025cf 	.word	0x080025cf
 8002364:	080025cf 	.word	0x080025cf
 8002368:	080025cf 	.word	0x080025cf
 800236c:	080023bd 	.word	0x080023bd
 8002370:	080025cf 	.word	0x080025cf
 8002374:	080025cf 	.word	0x080025cf
 8002378:	080025cf 	.word	0x080025cf
 800237c:	080025cf 	.word	0x080025cf
 8002380:	080025cf 	.word	0x080025cf
 8002384:	080025cf 	.word	0x080025cf
 8002388:	080025cf 	.word	0x080025cf
 800238c:	080023c3 	.word	0x080023c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002390:	4b94      	ldr	r3, [pc, #592]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b00      	cmp	r3, #0
 800239a:	d009      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800239c:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	4a90      	ldr	r2, [pc, #576]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80023ae:	e111      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023b0:	4b8d      	ldr	r3, [pc, #564]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023b2:	61bb      	str	r3, [r7, #24]
    break;
 80023b4:	e10e      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023b6:	4b8d      	ldr	r3, [pc, #564]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023b8:	61bb      	str	r3, [r7, #24]
    break;
 80023ba:	e10b      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80023bc:	4b8c      	ldr	r3, [pc, #560]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023be:	61bb      	str	r3, [r7, #24]
    break;
 80023c0:	e108      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80023cc:	4b85      	ldr	r3, [pc, #532]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023d8:	4b82      	ldr	r3, [pc, #520]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80023e2:	4b80      	ldr	r3, [pc, #512]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e6:	08db      	lsrs	r3, r3, #3
 80023e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80e1 	beq.w	80025c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b02      	cmp	r3, #2
 800240a:	f000 8083 	beq.w	8002514 <HAL_RCC_GetSysClockFreq+0x204>
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b02      	cmp	r3, #2
 8002412:	f200 80a1 	bhi.w	8002558 <HAL_RCC_GetSysClockFreq+0x248>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x114>
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d056      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002422:	e099      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002424:	4b6f      	ldr	r3, [pc, #444]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02d      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002430:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	08db      	lsrs	r3, r3, #3
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	4a6b      	ldr	r2, [pc, #428]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
 8002440:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800246a:	ed97 6a02 	vldr	s12, [r7, #8]
 800246e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80025f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800247a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800247e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002486:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800248a:	e087      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002496:	eddf 6a58 	vldr	s13, [pc, #352]	; 80025f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800249a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800249e:	4b51      	ldr	r3, [pc, #324]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80024b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80025f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024ce:	e065      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80025fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80024de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e2:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80025f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800250a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002512:	e043      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002600 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002526:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002536:	ed97 6a02 	vldr	s12, [r7, #8]
 800253a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80025f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800253e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800254a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800254e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002556:	e021      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002562:	eddf 6a26 	vldr	s13, [pc, #152]	; 80025fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257a:	ed97 6a02 	vldr	s12, [r7, #8]
 800257e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80025f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800258a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800258e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800259a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	0a5b      	lsrs	r3, r3, #9
 80025a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025a6:	3301      	adds	r3, #1
 80025a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	ee07 3a90 	vmov	s15, r3
 80025b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80025b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c0:	ee17 3a90 	vmov	r3, s15
 80025c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80025c6:	e005      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
    break;
 80025cc:	e002      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025d0:	61bb      	str	r3, [r7, #24]
    break;
 80025d2:	bf00      	nop
  }

  return sysclockfreq;
 80025d4:	69bb      	ldr	r3, [r7, #24]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	58024400 	.word	0x58024400
 80025e8:	03d09000 	.word	0x03d09000
 80025ec:	003d0900 	.word	0x003d0900
 80025f0:	007a1200 	.word	0x007a1200
 80025f4:	46000000 	.word	0x46000000
 80025f8:	4c742400 	.word	0x4c742400
 80025fc:	4a742400 	.word	0x4a742400
 8002600:	4af42400 	.word	0x4af42400

08002604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800260a:	f7ff fe81 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 800260e:	4602      	mov	r2, r0
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_RCC_GetHCLKFreq+0x50>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	490f      	ldr	r1, [pc, #60]	; (8002658 <HAL_RCC_GetHCLKFreq+0x54>)
 800261c:	5ccb      	ldrb	r3, [r1, r3]
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	fa22 f303 	lsr.w	r3, r2, r3
 8002626:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_RCC_GetHCLKFreq+0x50>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	4a09      	ldr	r2, [pc, #36]	; (8002658 <HAL_RCC_GetHCLKFreq+0x54>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	fa22 f303 	lsr.w	r3, r2, r3
 800263e:	4a07      	ldr	r2, [pc, #28]	; (800265c <HAL_RCC_GetHCLKFreq+0x58>)
 8002640:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002642:	4a07      	ldr	r2, [pc, #28]	; (8002660 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_RCC_GetHCLKFreq+0x58>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	58024400 	.word	0x58024400
 8002658:	08005bbc 	.word	0x08005bbc
 800265c:	24000004 	.word	0x24000004
 8002660:	24000000 	.word	0x24000000

08002664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002668:	f7ff ffcc 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4904      	ldr	r1, [pc, #16]	; (800268c <HAL_RCC_GetPCLK1Freq+0x28>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}
 8002688:	58024400 	.word	0x58024400
 800268c:	08005bbc 	.word	0x08005bbc

08002690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002694:	f7ff ffb6 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4904      	ldr	r1, [pc, #16]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	58024400 	.word	0x58024400
 80026b8:	08005bbc 	.word	0x08005bbc

080026bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026c4:	2300      	movs	r3, #0
 80026c6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026c8:	2300      	movs	r3, #0
 80026ca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d03f      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026e0:	d02a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026e6:	d824      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ec:	d018      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026f2:	d81e      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026fc:	d007      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026fe:	e018      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002700:	4ba3      	ldr	r3, [pc, #652]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	4aa2      	ldr	r2, [pc, #648]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800270c:	e015      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3304      	adds	r3, #4
 8002712:	2102      	movs	r1, #2
 8002714:	4618      	mov	r0, r3
 8002716:	f001 f9d5 	bl	8003ac4 <RCCEx_PLL2_Config>
 800271a:	4603      	mov	r3, r0
 800271c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800271e:	e00c      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3324      	adds	r3, #36	; 0x24
 8002724:	2102      	movs	r1, #2
 8002726:	4618      	mov	r0, r3
 8002728:	f001 fa7e 	bl	8003c28 <RCCEx_PLL3_Config>
 800272c:	4603      	mov	r3, r0
 800272e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002730:	e003      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
      break;
 8002736:	e000      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d109      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002740:	4b93      	ldr	r3, [pc, #588]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800274c:	4990      	ldr	r1, [pc, #576]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	650b      	str	r3, [r1, #80]	; 0x50
 8002752:	e001      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d03d      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	2b04      	cmp	r3, #4
 800276a:	d826      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800276c:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	08002789 	.word	0x08002789
 8002778:	08002797 	.word	0x08002797
 800277c:	080027a9 	.word	0x080027a9
 8002780:	080027c1 	.word	0x080027c1
 8002784:	080027c1 	.word	0x080027c1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002788:	4b81      	ldr	r3, [pc, #516]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	4a80      	ldr	r2, [pc, #512]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800278e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002794:	e015      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f001 f991 	bl	8003ac4 <RCCEx_PLL2_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027a6:	e00c      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3324      	adds	r3, #36	; 0x24
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f001 fa3a 	bl	8003c28 <RCCEx_PLL3_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027b8:	e003      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	75fb      	strb	r3, [r7, #23]
      break;
 80027be:	e000      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80027c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d109      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027c8:	4b71      	ldr	r3, [pc, #452]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027cc:	f023 0207 	bic.w	r2, r3, #7
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d4:	496e      	ldr	r1, [pc, #440]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	650b      	str	r3, [r1, #80]	; 0x50
 80027da:	e001      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d042      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f4:	d02b      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80027f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fa:	d825      	bhi.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80027fc:	2bc0      	cmp	r3, #192	; 0xc0
 80027fe:	d028      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002800:	2bc0      	cmp	r3, #192	; 0xc0
 8002802:	d821      	bhi.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002804:	2b80      	cmp	r3, #128	; 0x80
 8002806:	d016      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d81d      	bhi.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d007      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002814:	e018      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002816:	4b5e      	ldr	r3, [pc, #376]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	4a5d      	ldr	r2, [pc, #372]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800281c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002820:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002822:	e017      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f001 f94a 	bl	8003ac4 <RCCEx_PLL2_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002834:	e00e      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3324      	adds	r3, #36	; 0x24
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f001 f9f3 	bl	8003c28 <RCCEx_PLL3_Config>
 8002842:	4603      	mov	r3, r0
 8002844:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002846:	e005      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	75fb      	strb	r3, [r7, #23]
      break;
 800284c:	e002      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800284e:	bf00      	nop
 8002850:	e000      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d109      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800285a:	4b4d      	ldr	r3, [pc, #308]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800285c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	494a      	ldr	r1, [pc, #296]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	650b      	str	r3, [r1, #80]	; 0x50
 800286c:	e001      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287a:	2b00      	cmp	r3, #0
 800287c:	d049      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002884:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002888:	d030      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x230>
 800288a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800288e:	d82a      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002890:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002894:	d02c      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002896:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800289a:	d824      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800289c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a0:	d018      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80028a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a6:	d81e      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80028ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028b0:	d007      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80028b2:	e018      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028b4:	4b36      	ldr	r3, [pc, #216]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	4a35      	ldr	r2, [pc, #212]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028c0:	e017      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f001 f8fb 	bl	8003ac4 <RCCEx_PLL2_Config>
 80028ce:	4603      	mov	r3, r0
 80028d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80028d2:	e00e      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3324      	adds	r3, #36	; 0x24
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 f9a4 	bl	8003c28 <RCCEx_PLL3_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028e4:	e005      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	75fb      	strb	r3, [r7, #23]
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80028ec:	bf00      	nop
 80028ee:	e000      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80028f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80028f8:	4b25      	ldr	r3, [pc, #148]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002906:	4922      	ldr	r1, [pc, #136]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	658b      	str	r3, [r1, #88]	; 0x58
 800290c:	e001      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291a:	2b00      	cmp	r3, #0
 800291c:	d04b      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002928:	d030      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800292a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800292e:	d82a      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002930:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002934:	d02e      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002936:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800293a:	d824      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800293c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002940:	d018      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002946:	d81e      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800294c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002950:	d007      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002952:	e018      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800295a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002960:	e019      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f001 f8ab 	bl	8003ac4 <RCCEx_PLL2_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002972:	e010      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3324      	adds	r3, #36	; 0x24
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f001 f954 	bl	8003c28 <RCCEx_PLL3_Config>
 8002980:	4603      	mov	r3, r0
 8002982:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002984:	e007      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	75fb      	strb	r3, [r7, #23]
      break;
 800298a:	e004      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800298c:	bf00      	nop
 800298e:	e002      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002990:	58024400 	.word	0x58024400
      break;
 8002994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800299c:	4b99      	ldr	r3, [pc, #612]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029aa:	4996      	ldr	r1, [pc, #600]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	658b      	str	r3, [r1, #88]	; 0x58
 80029b0:	e001      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d032      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c6:	2b30      	cmp	r3, #48	; 0x30
 80029c8:	d01c      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80029ca:	2b30      	cmp	r3, #48	; 0x30
 80029cc:	d817      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x342>
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d00c      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x330>
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d813      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x342>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d016      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d10f      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029de:	4b89      	ldr	r3, [pc, #548]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	4a88      	ldr	r2, [pc, #544]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80029ea:	e00e      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	2102      	movs	r1, #2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 f866 	bl	8003ac4 <RCCEx_PLL2_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80029fc:	e005      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
      break;
 8002a02:	e002      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a10:	4b7c      	ldr	r3, [pc, #496]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1c:	4979      	ldr	r1, [pc, #484]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a22:	e001      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d047      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a3c:	d030      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a42:	d82a      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002a44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a48:	d02c      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002a4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a4e:	d824      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a54:	d018      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5a:	d81e      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a64:	d007      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002a66:	e018      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a68:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	4a65      	ldr	r2, [pc, #404]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a74:	e017      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 f821 	bl	8003ac4 <RCCEx_PLL2_Config>
 8002a82:	4603      	mov	r3, r0
 8002a84:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a86:	e00e      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3324      	adds	r3, #36	; 0x24
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 f8ca 	bl	8003c28 <RCCEx_PLL3_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a98:	e005      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9e:	e002      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002aa0:	bf00      	nop
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002aac:	4b55      	ldr	r3, [pc, #340]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	4952      	ldr	r1, [pc, #328]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	650b      	str	r3, [r1, #80]	; 0x50
 8002abe:	e001      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d049      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad8:	d02e      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ada:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ade:	d828      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ae0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ae4:	d02a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002ae6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aea:	d822      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002aec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002af0:	d026      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002af2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002af6:	d81c      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002afc:	d010      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b02:	d816      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01d      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0c:	d111      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2101      	movs	r1, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 ffd5 	bl	8003ac4 <RCCEx_PLL2_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b1e:	e012      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3324      	adds	r3, #36	; 0x24
 8002b24:	2101      	movs	r1, #1
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 f87e 	bl	8003c28 <RCCEx_PLL3_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b30:	e009      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
      break;
 8002b36:	e006      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002b38:	bf00      	nop
 8002b3a:	e004      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002b3c:	bf00      	nop
 8002b3e:	e002      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002b40:	bf00      	nop
 8002b42:	e000      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b50:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b58:	492a      	ldr	r1, [pc, #168]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8002b5e:	e001      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d04d      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7a:	d02e      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b80:	d828      	bhi.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b86:	d02a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8c:	d822      	bhi.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b92:	d026      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002b94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b98:	d81c      	bhi.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b9e:	d010      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba4:	d816      	bhi.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01d      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bae:	d111      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 ff84 	bl	8003ac4 <RCCEx_PLL2_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002bc0:	e012      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3324      	adds	r3, #36	; 0x24
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 f82d 	bl	8003c28 <RCCEx_PLL3_Config>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002bd2:	e009      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd8:	e006      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e004      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002bde:	bf00      	nop
 8002be0:	e002      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002be2:	bf00      	nop
 8002be4:	e000      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002bfc:	4901      	ldr	r1, [pc, #4]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	658b      	str	r3, [r1, #88]	; 0x58
 8002c02:	e003      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d02f      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c20:	d00e      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c26:	d814      	bhi.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d015      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002c2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c30:	d10f      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c32:	4baf      	ldr	r3, [pc, #700]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	4aae      	ldr	r2, [pc, #696]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c3e:	e00c      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 ff3c 	bl	8003ac4 <RCCEx_PLL2_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c50:	e003      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
      break;
 8002c56:	e000      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c60:	4ba3      	ldr	r3, [pc, #652]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c6c:	49a0      	ldr	r1, [pc, #640]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	650b      	str	r3, [r1, #80]	; 0x50
 8002c72:	e001      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d032      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d81b      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002c8c:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c92:	bf00      	nop
 8002c94:	08002ccb 	.word	0x08002ccb
 8002c98:	08002ca5 	.word	0x08002ca5
 8002c9c:	08002cb3 	.word	0x08002cb3
 8002ca0:	08002ccb 	.word	0x08002ccb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca4:	4b92      	ldr	r3, [pc, #584]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	4a91      	ldr	r2, [pc, #580]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002cb0:	e00c      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 ff03 	bl	8003ac4 <RCCEx_PLL2_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002cc2:	e003      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc8:	e000      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002cd2:	4b87      	ldr	r3, [pc, #540]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	f023 0203 	bic.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4984      	ldr	r1, [pc, #528]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ce4:	e001      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8086 	beq.w	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf8:	4b7e      	ldr	r3, [pc, #504]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a7d      	ldr	r2, [pc, #500]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d04:	f7fe f9ae 	bl	8001064 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d0a:	e009      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0c:	f7fe f9aa 	bl	8001064 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d902      	bls.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	75fb      	strb	r3, [r7, #23]
        break;
 8002d1e:	e005      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d20:	4b74      	ldr	r3, [pc, #464]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0ef      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d166      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d32:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d3c:	4053      	eors	r3, r2
 8002d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d013      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d46:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d50:	4b67      	ldr	r3, [pc, #412]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	4a66      	ldr	r2, [pc, #408]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5c:	4b64      	ldr	r3, [pc, #400]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a63      	ldr	r2, [pc, #396]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d68:	4a61      	ldr	r2, [pc, #388]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d78:	d115      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fe f973 	bl	8001064 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d80:	e00b      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe f96f 	bl	8001064 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d902      	bls.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	75fb      	strb	r3, [r7, #23]
            break;
 8002d98:	e005      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d9a:	4b55      	ldr	r3, [pc, #340]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ed      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d126      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dba:	d10d      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002dbc:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dca:	0919      	lsrs	r1, r3, #4
 8002dcc:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002dce:	400b      	ands	r3, r1
 8002dd0:	4947      	ldr	r1, [pc, #284]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	610b      	str	r3, [r1, #16]
 8002dd6:	e005      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002dd8:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	4a44      	ldr	r2, [pc, #272]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dde:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002de2:	6113      	str	r3, [r2, #16]
 8002de4:	4b42      	ldr	r3, [pc, #264]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df2:	493f      	ldr	r1, [pc, #252]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	670b      	str	r3, [r1, #112]	; 0x70
 8002df8:	e004      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	75bb      	strb	r3, [r7, #22]
 8002dfe:	e001      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8085 	beq.w	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e16:	2b28      	cmp	r3, #40	; 0x28
 8002e18:	d866      	bhi.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002efd 	.word	0x08002efd
 8002e24:	08002ee9 	.word	0x08002ee9
 8002e28:	08002ee9 	.word	0x08002ee9
 8002e2c:	08002ee9 	.word	0x08002ee9
 8002e30:	08002ee9 	.word	0x08002ee9
 8002e34:	08002ee9 	.word	0x08002ee9
 8002e38:	08002ee9 	.word	0x08002ee9
 8002e3c:	08002ee9 	.word	0x08002ee9
 8002e40:	08002ec5 	.word	0x08002ec5
 8002e44:	08002ee9 	.word	0x08002ee9
 8002e48:	08002ee9 	.word	0x08002ee9
 8002e4c:	08002ee9 	.word	0x08002ee9
 8002e50:	08002ee9 	.word	0x08002ee9
 8002e54:	08002ee9 	.word	0x08002ee9
 8002e58:	08002ee9 	.word	0x08002ee9
 8002e5c:	08002ee9 	.word	0x08002ee9
 8002e60:	08002ed7 	.word	0x08002ed7
 8002e64:	08002ee9 	.word	0x08002ee9
 8002e68:	08002ee9 	.word	0x08002ee9
 8002e6c:	08002ee9 	.word	0x08002ee9
 8002e70:	08002ee9 	.word	0x08002ee9
 8002e74:	08002ee9 	.word	0x08002ee9
 8002e78:	08002ee9 	.word	0x08002ee9
 8002e7c:	08002ee9 	.word	0x08002ee9
 8002e80:	08002efd 	.word	0x08002efd
 8002e84:	08002ee9 	.word	0x08002ee9
 8002e88:	08002ee9 	.word	0x08002ee9
 8002e8c:	08002ee9 	.word	0x08002ee9
 8002e90:	08002ee9 	.word	0x08002ee9
 8002e94:	08002ee9 	.word	0x08002ee9
 8002e98:	08002ee9 	.word	0x08002ee9
 8002e9c:	08002ee9 	.word	0x08002ee9
 8002ea0:	08002efd 	.word	0x08002efd
 8002ea4:	08002ee9 	.word	0x08002ee9
 8002ea8:	08002ee9 	.word	0x08002ee9
 8002eac:	08002ee9 	.word	0x08002ee9
 8002eb0:	08002ee9 	.word	0x08002ee9
 8002eb4:	08002ee9 	.word	0x08002ee9
 8002eb8:	08002ee9 	.word	0x08002ee9
 8002ebc:	08002ee9 	.word	0x08002ee9
 8002ec0:	08002efd 	.word	0x08002efd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fdfa 	bl	8003ac4 <RCCEx_PLL2_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002ed4:	e013      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3324      	adds	r3, #36	; 0x24
 8002eda:	2101      	movs	r1, #1
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fea3 	bl	8003c28 <RCCEx_PLL3_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002ee6:	e00a      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	75fb      	strb	r3, [r7, #23]
      break;
 8002eec:	e007      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002eee:	bf00      	nop
 8002ef0:	58024400 	.word	0x58024400
 8002ef4:	58024800 	.word	0x58024800
 8002ef8:	00ffffcf 	.word	0x00ffffcf
      break;
 8002efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f04:	4b96      	ldr	r3, [pc, #600]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f10:	4993      	ldr	r1, [pc, #588]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	654b      	str	r3, [r1, #84]	; 0x54
 8002f16:	e001      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d038      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d821      	bhi.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002f30:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f7b 	.word	0x08002f7b
 8002f3c:	08002f51 	.word	0x08002f51
 8002f40:	08002f63 	.word	0x08002f63
 8002f44:	08002f7b 	.word	0x08002f7b
 8002f48:	08002f7b 	.word	0x08002f7b
 8002f4c:	08002f7b 	.word	0x08002f7b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fdb4 	bl	8003ac4 <RCCEx_PLL2_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f60:	e00c      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3324      	adds	r3, #36	; 0x24
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fe5d 	bl	8003c28 <RCCEx_PLL3_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f72:	e003      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	75fb      	strb	r3, [r7, #23]
      break;
 8002f78:	e000      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f82:	4b77      	ldr	r3, [pc, #476]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	f023 0207 	bic.w	r2, r3, #7
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8e:	4974      	ldr	r1, [pc, #464]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	654b      	str	r3, [r1, #84]	; 0x54
 8002f94:	e001      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d03a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	2b05      	cmp	r3, #5
 8002fae:	d821      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002fb0:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	08002ffb 	.word	0x08002ffb
 8002fbc:	08002fd1 	.word	0x08002fd1
 8002fc0:	08002fe3 	.word	0x08002fe3
 8002fc4:	08002ffb 	.word	0x08002ffb
 8002fc8:	08002ffb 	.word	0x08002ffb
 8002fcc:	08002ffb 	.word	0x08002ffb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fd74 	bl	8003ac4 <RCCEx_PLL2_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002fe0:	e00c      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3324      	adds	r3, #36	; 0x24
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fe1d 	bl	8003c28 <RCCEx_PLL3_Config>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002ff2:	e003      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff8:	e000      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003002:	4b57      	ldr	r3, [pc, #348]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	f023 0207 	bic.w	r2, r3, #7
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	4953      	ldr	r1, [pc, #332]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	658b      	str	r3, [r1, #88]	; 0x58
 8003016:	e001      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d04b      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800302e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003032:	d02e      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003038:	d828      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800303a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303e:	d02a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003044:	d822      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003046:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800304a:	d026      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800304c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003050:	d81c      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003056:	d010      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800305c:	d816      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01d      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003066:	d111      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fd28 	bl	8003ac4 <RCCEx_PLL2_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003078:	e012      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3324      	adds	r3, #36	; 0x24
 800307e:	2102      	movs	r1, #2
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fdd1 	bl	8003c28 <RCCEx_PLL3_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800308a:	e009      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	75fb      	strb	r3, [r7, #23]
      break;
 8003090:	e006      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003092:	bf00      	nop
 8003094:	e004      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003096:	bf00      	nop
 8003098:	e002      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800309a:	bf00      	nop
 800309c:	e000      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800309e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030a6:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030b4:	492a      	ldr	r1, [pc, #168]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	654b      	str	r3, [r1, #84]	; 0x54
 80030ba:	e001      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d04d      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030d6:	d02e      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80030d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030dc:	d828      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	d02a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80030e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e8:	d822      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80030ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030ee:	d026      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80030f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030f4:	d81c      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80030f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fa:	d010      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80030fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003100:	d816      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01d      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310a:	d111      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fcd6 	bl	8003ac4 <RCCEx_PLL2_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800311c:	e012      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3324      	adds	r3, #36	; 0x24
 8003122:	2102      	movs	r1, #2
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fd7f 	bl	8003c28 <RCCEx_PLL3_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800312e:	e009      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
      break;
 8003134:	e006      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003136:	bf00      	nop
 8003138:	e004      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800313a:	bf00      	nop
 800313c:	e002      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003158:	4901      	ldr	r1, [pc, #4]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	658b      	str	r3, [r1, #88]	; 0x58
 800315e:	e003      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b00      	cmp	r3, #0
 8003172:	d04b      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800317a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800317e:	d02e      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003180:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003184:	d828      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318a:	d02a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800318c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003190:	d822      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003192:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003196:	d026      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003198:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800319c:	d81c      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800319e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a2:	d010      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80031a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a8:	d816      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01d      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b2:	d111      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fc82 	bl	8003ac4 <RCCEx_PLL2_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80031c4:	e012      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3324      	adds	r3, #36	; 0x24
 80031ca:	2102      	movs	r1, #2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fd2b 	bl	8003c28 <RCCEx_PLL3_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80031d6:	e009      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	75fb      	strb	r3, [r7, #23]
      break;
 80031dc:	e006      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80031de:	bf00      	nop
 80031e0:	e004      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80031e2:	bf00      	nop
 80031e4:	e002      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80031e6:	bf00      	nop
 80031e8:	e000      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80031ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80031f2:	4b9d      	ldr	r3, [pc, #628]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003200:	4999      	ldr	r1, [pc, #612]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003202:	4313      	orrs	r3, r2
 8003204:	658b      	str	r3, [r1, #88]	; 0x58
 8003206:	e001      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003222:	d10a      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3324      	adds	r3, #36	; 0x24
 8003228:	2102      	movs	r1, #2
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fcfc 	bl	8003c28 <RCCEx_PLL3_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800323a:	4b8b      	ldr	r3, [pc, #556]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003248:	4987      	ldr	r1, [pc, #540]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800324a:	4313      	orrs	r3, r2
 800324c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003264:	d10a      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3324      	adds	r3, #36	; 0x24
 800326a:	2102      	movs	r1, #2
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fcdb 	bl	8003c28 <RCCEx_PLL3_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800327c:	4b7a      	ldr	r3, [pc, #488]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800328a:	4977      	ldr	r1, [pc, #476]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800328c:	4313      	orrs	r3, r2
 800328e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d034      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032a6:	d01d      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80032a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ac:	d817      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d009      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80032b8:	e011      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3304      	adds	r3, #4
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fbff 	bl	8003ac4 <RCCEx_PLL2_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80032ca:	e00c      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3324      	adds	r3, #36	; 0x24
 80032d0:	2102      	movs	r1, #2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fca8 	bl	8003c28 <RCCEx_PLL3_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80032dc:	e003      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
      break;
 80032e2:	e000      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80032e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10a      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ec:	4b5e      	ldr	r3, [pc, #376]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032fa:	495b      	ldr	r1, [pc, #364]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	658b      	str	r3, [r1, #88]	; 0x58
 8003300:	e001      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003302:	7dfb      	ldrb	r3, [r7, #23]
 8003304:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d033      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003318:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800331c:	d01c      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800331e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003322:	d816      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003328:	d003      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800332a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800332e:	d007      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003330:	e00f      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003332:	4b4d      	ldr	r3, [pc, #308]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	4a4c      	ldr	r2, [pc, #304]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800333e:	e00c      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3324      	adds	r3, #36	; 0x24
 8003344:	2101      	movs	r1, #1
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fc6e 	bl	8003c28 <RCCEx_PLL3_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003350:	e003      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	75fb      	strb	r3, [r7, #23]
      break;
 8003356:	e000      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10a      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003360:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336e:	493e      	ldr	r1, [pc, #248]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003370:	4313      	orrs	r3, r2
 8003372:	654b      	str	r3, [r1, #84]	; 0x54
 8003374:	e001      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d029      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800338e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003392:	d007      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003394:	e00f      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003396:	4b34      	ldr	r3, [pc, #208]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	4a33      	ldr	r2, [pc, #204]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800339c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033a2:	e00b      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3304      	adds	r3, #4
 80033a8:	2102      	movs	r1, #2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fb8a 	bl	8003ac4 <RCCEx_PLL2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033b4:	e002      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
      break;
 80033ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033c2:	4b29      	ldr	r3, [pc, #164]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ce:	4926      	ldr	r1, [pc, #152]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033d4:	e001      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3324      	adds	r3, #36	; 0x24
 80033ea:	2102      	movs	r1, #2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fc1b 	bl	8003c28 <RCCEx_PLL3_Config>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d033      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800340c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003410:	d017      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003416:	d811      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341c:	d013      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800341e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003422:	d80b      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d010      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342c:	d106      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	4a0d      	ldr	r2, [pc, #52]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003438:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800343a:	e007      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	75fb      	strb	r3, [r7, #23]
      break;
 8003440:	e004      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003442:	bf00      	nop
 8003444:	e002      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800344a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10c      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800345e:	4902      	ldr	r1, [pc, #8]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003460:	4313      	orrs	r3, r2
 8003462:	654b      	str	r3, [r1, #84]	; 0x54
 8003464:	e004      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003466:	bf00      	nop
 8003468:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800347e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003480:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	492e      	ldr	r1, [pc, #184]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800348a:	4313      	orrs	r3, r2
 800348c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800349a:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034a8:	4926      	ldr	r1, [pc, #152]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034ba:	4b22      	ldr	r3, [pc, #136]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c6:	491f      	ldr	r1, [pc, #124]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00d      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	4a19      	ldr	r2, [pc, #100]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034e2:	6113      	str	r3, [r2, #16]
 80034e4:	4b17      	ldr	r3, [pc, #92]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034ee:	4915      	ldr	r1, [pc, #84]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	da08      	bge.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003500:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003508:	490e      	ldr	r1, [pc, #56]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800350a:	4313      	orrs	r3, r2
 800350c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	4906      	ldr	r1, [pc, #24]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800352a:	4313      	orrs	r3, r2
 800352c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800352e:	7dbb      	ldrb	r3, [r7, #22]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	58024400 	.word	0x58024400

08003548 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800354c:	f7ff f85a 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4904      	ldr	r1, [pc, #16]	; (8003570 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	58024400 	.word	0x58024400
 8003570:	08005bbc 	.word	0x08005bbc

08003574 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	; 0x24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800357c:	4ba1      	ldr	r3, [pc, #644]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003586:	4b9f      	ldr	r3, [pc, #636]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	0b1b      	lsrs	r3, r3, #12
 800358c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003590:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003592:	4b9c      	ldr	r3, [pc, #624]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800359e:	4b99      	ldr	r3, [pc, #612]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	08db      	lsrs	r3, r3, #3
 80035a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8111 	beq.w	80037e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	f000 8083 	beq.w	80036d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	f200 80a1 	bhi.w	8003714 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d056      	beq.n	800368c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80035de:	e099      	b.n	8003714 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035e0:	4b88      	ldr	r3, [pc, #544]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d02d      	beq.n	8003648 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035ec:	4b85      	ldr	r3, [pc, #532]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	08db      	lsrs	r3, r3, #3
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	4a84      	ldr	r2, [pc, #528]	; (8003808 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
 80035fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	ee07 3a90 	vmov	s15, r3
 8003604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003616:	4b7b      	ldr	r3, [pc, #492]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003626:	ed97 6a03 	vldr	s12, [r7, #12]
 800362a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800380c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800362e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800363a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800363e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003642:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003646:	e087      	b.n	8003758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003652:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003810 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800365a:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800366a:	ed97 6a03 	vldr	s12, [r7, #12]
 800366e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800380c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800367a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800367e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800368a:	e065      	b.n	8003758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003696:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800369a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369e:	4b59      	ldr	r3, [pc, #356]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80036b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800380c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036ce:	e043      	b.n	8003758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80036de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e2:	4b48      	ldr	r3, [pc, #288]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80036f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800380c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800370a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003712:	e021      	b.n	8003758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003726:	4b37      	ldr	r3, [pc, #220]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003736:	ed97 6a03 	vldr	s12, [r7, #12]
 800373a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800380c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800373e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003756:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003758:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	0a5b      	lsrs	r3, r3, #9
 800375e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800376e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003772:	edd7 6a07 	vldr	s13, [r7, #28]
 8003776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800377a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800377e:	ee17 2a90 	vmov	r2, s15
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003786:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800379c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80037a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ac:	ee17 2a90 	vmov	r2, s15
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80037b4:	4b13      	ldr	r3, [pc, #76]	; (8003804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	0e1b      	lsrs	r3, r3, #24
 80037ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80037d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037da:	ee17 2a90 	vmov	r2, s15
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80037e2:	e008      	b.n	80037f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
}
 80037f6:	bf00      	nop
 80037f8:	3724      	adds	r7, #36	; 0x24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	58024400 	.word	0x58024400
 8003808:	03d09000 	.word	0x03d09000
 800380c:	46000000 	.word	0x46000000
 8003810:	4c742400 	.word	0x4c742400
 8003814:	4a742400 	.word	0x4a742400
 8003818:	4af42400 	.word	0x4af42400

0800381c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	; 0x24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003824:	4ba1      	ldr	r3, [pc, #644]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800382e:	4b9f      	ldr	r3, [pc, #636]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	0d1b      	lsrs	r3, r3, #20
 8003834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003838:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800383a:	4b9c      	ldr	r3, [pc, #624]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003846:	4b99      	ldr	r3, [pc, #612]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	08db      	lsrs	r3, r3, #3
 800384c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8111 	beq.w	8003a8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b02      	cmp	r3, #2
 800386e:	f000 8083 	beq.w	8003978 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b02      	cmp	r3, #2
 8003876:	f200 80a1 	bhi.w	80039bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d056      	beq.n	8003934 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003886:	e099      	b.n	80039bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003888:	4b88      	ldr	r3, [pc, #544]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d02d      	beq.n	80038f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003894:	4b85      	ldr	r3, [pc, #532]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	08db      	lsrs	r3, r3, #3
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	4a84      	ldr	r2, [pc, #528]	; (8003ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80038a0:	fa22 f303 	lsr.w	r3, r2, r3
 80038a4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	ee07 3a90 	vmov	s15, r3
 80038ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038be:	4b7b      	ldr	r3, [pc, #492]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80038d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80038d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80038ee:	e087      	b.n	8003a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80038fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003902:	4b6a      	ldr	r3, [pc, #424]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003912:	ed97 6a03 	vldr	s12, [r7, #12]
 8003916:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800391a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003932:	e065      	b.n	8003a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003abc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003946:	4b59      	ldr	r3, [pc, #356]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003956:	ed97 6a03 	vldr	s12, [r7, #12]
 800395a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800395e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800396a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003976:	e043      	b.n	8003a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003982:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398a:	4b48      	ldr	r3, [pc, #288]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399a:	ed97 6a03 	vldr	s12, [r7, #12]
 800399e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039ba:	e021      	b.n	8003a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003abc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80039ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ce:	4b37      	ldr	r3, [pc, #220]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039de:	ed97 6a03 	vldr	s12, [r7, #12]
 80039e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003a00:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	0a5b      	lsrs	r3, r3, #9
 8003a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a26:	ee17 2a90 	vmov	r2, s15
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003a2e:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a38:	ee07 3a90 	vmov	s15, r3
 8003a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a54:	ee17 2a90 	vmov	r2, s15
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003a5c:	4b13      	ldr	r3, [pc, #76]	; (8003aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	0e1b      	lsrs	r3, r3, #24
 8003a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a76:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a82:	ee17 2a90 	vmov	r2, s15
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003a8a:	e008      	b.n	8003a9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
}
 8003a9e:	bf00      	nop
 8003aa0:	3724      	adds	r7, #36	; 0x24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	58024400 	.word	0x58024400
 8003ab0:	03d09000 	.word	0x03d09000
 8003ab4:	46000000 	.word	0x46000000
 8003ab8:	4c742400 	.word	0x4c742400
 8003abc:	4a742400 	.word	0x4a742400
 8003ac0:	4af42400 	.word	0x4af42400

08003ac4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ad2:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d101      	bne.n	8003ae2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e099      	b.n	8003c16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003ae2:	4b4f      	ldr	r3, [pc, #316]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a4e      	ldr	r2, [pc, #312]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003ae8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aee:	f7fd fab9 	bl	8001064 <HAL_GetTick>
 8003af2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003af4:	e008      	b.n	8003b08 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003af6:	f7fd fab5 	bl	8001064 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e086      	b.n	8003c16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b08:	4b45      	ldr	r3, [pc, #276]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f0      	bne.n	8003af6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003b14:	4b42      	ldr	r3, [pc, #264]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	031b      	lsls	r3, r3, #12
 8003b22:	493f      	ldr	r1, [pc, #252]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	628b      	str	r3, [r1, #40]	; 0x28
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	025b      	lsls	r3, r3, #9
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	061b      	lsls	r3, r3, #24
 8003b54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b58:	4931      	ldr	r1, [pc, #196]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003b5e:	4b30      	ldr	r3, [pc, #192]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	492d      	ldr	r1, [pc, #180]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003b70:	4b2b      	ldr	r3, [pc, #172]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	f023 0220 	bic.w	r2, r3, #32
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	4928      	ldr	r1, [pc, #160]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003b82:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	4a26      	ldr	r2, [pc, #152]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003b88:	f023 0310 	bic.w	r3, r3, #16
 8003b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003b8e:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <RCCEx_PLL2_Config+0x160>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	69d2      	ldr	r2, [r2, #28]
 8003b9a:	00d2      	lsls	r2, r2, #3
 8003b9c:	4920      	ldr	r1, [pc, #128]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003ba8:	f043 0310 	orr.w	r3, r3, #16
 8003bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003bb4:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003bba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bc0:	e00f      	b.n	8003be2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d106      	bne.n	8003bd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003bc8:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	4a14      	ldr	r2, [pc, #80]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bd4:	e005      	b.n	8003be2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003bd6:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	4a11      	ldr	r2, [pc, #68]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003be0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a0e      	ldr	r2, [pc, #56]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003be8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bee:	f7fd fa39 	bl	8001064 <HAL_GetTick>
 8003bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bf4:	e008      	b.n	8003c08 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003bf6:	f7fd fa35 	bl	8001064 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e006      	b.n	8003c16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <RCCEx_PLL2_Config+0x15c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	58024400 	.word	0x58024400
 8003c24:	ffff0007 	.word	0xffff0007

08003c28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c36:	4b53      	ldr	r3, [pc, #332]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d101      	bne.n	8003c46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e099      	b.n	8003d7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003c46:	4b4f      	ldr	r3, [pc, #316]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a4e      	ldr	r2, [pc, #312]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c52:	f7fd fa07 	bl	8001064 <HAL_GetTick>
 8003c56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c58:	e008      	b.n	8003c6c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c5a:	f7fd fa03 	bl	8001064 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e086      	b.n	8003d7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c6c:	4b45      	ldr	r3, [pc, #276]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003c78:	4b42      	ldr	r3, [pc, #264]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	051b      	lsls	r3, r3, #20
 8003c86:	493f      	ldr	r1, [pc, #252]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	628b      	str	r3, [r1, #40]	; 0x28
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	025b      	lsls	r3, r3, #9
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cbc:	4931      	ldr	r1, [pc, #196]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003cc2:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	492d      	ldr	r1, [pc, #180]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	4928      	ldr	r1, [pc, #160]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	4a26      	ldr	r2, [pc, #152]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf6:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <RCCEx_PLL3_Config+0x160>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	69d2      	ldr	r2, [r2, #28]
 8003cfe:	00d2      	lsls	r2, r2, #3
 8003d00:	4920      	ldr	r1, [pc, #128]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003d06:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d18:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	4a19      	ldr	r2, [pc, #100]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003d1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d24:	e00f      	b.n	8003d46 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d106      	bne.n	8003d3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003d2c:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	4a14      	ldr	r2, [pc, #80]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003d32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d38:	e005      	b.n	8003d46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	4a11      	ldr	r2, [pc, #68]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003d40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d52:	f7fd f987 	bl	8001064 <HAL_GetTick>
 8003d56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d58:	e008      	b.n	8003d6c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d5a:	f7fd f983 	bl	8001064 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e006      	b.n	8003d7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <RCCEx_PLL3_Config+0x15c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	58024400 	.word	0x58024400
 8003d88:	ffff0007 	.word	0xffff0007

08003d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e049      	b.n	8003e32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fc ff78 	bl	8000ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f000 fab8 	bl	8004340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e049      	b.n	8003ee0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d106      	bne.n	8003e66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f841 	bl	8003ee8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f000 fa61 	bl	8004340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_TIM_PWM_Start+0x24>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	bf14      	ite	ne
 8003f18:	2301      	movne	r3, #1
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e03c      	b.n	8003f9a <HAL_TIM_PWM_Start+0x9e>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d109      	bne.n	8003f3a <HAL_TIM_PWM_Start+0x3e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	bf14      	ite	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	2300      	moveq	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	e02f      	b.n	8003f9a <HAL_TIM_PWM_Start+0x9e>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d109      	bne.n	8003f54 <HAL_TIM_PWM_Start+0x58>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	e022      	b.n	8003f9a <HAL_TIM_PWM_Start+0x9e>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	d109      	bne.n	8003f6e <HAL_TIM_PWM_Start+0x72>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	bf14      	ite	ne
 8003f66:	2301      	movne	r3, #1
 8003f68:	2300      	moveq	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	e015      	b.n	8003f9a <HAL_TIM_PWM_Start+0x9e>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d109      	bne.n	8003f88 <HAL_TIM_PWM_Start+0x8c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e008      	b.n	8003f9a <HAL_TIM_PWM_Start+0x9e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e0a1      	b.n	80040e6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0xb6>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb0:	e023      	b.n	8003ffa <HAL_TIM_PWM_Start+0xfe>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d104      	bne.n	8003fc2 <HAL_TIM_PWM_Start+0xc6>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc0:	e01b      	b.n	8003ffa <HAL_TIM_PWM_Start+0xfe>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d104      	bne.n	8003fd2 <HAL_TIM_PWM_Start+0xd6>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd0:	e013      	b.n	8003ffa <HAL_TIM_PWM_Start+0xfe>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b0c      	cmp	r3, #12
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0xe6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe0:	e00b      	b.n	8003ffa <HAL_TIM_PWM_Start+0xfe>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_PWM_Start+0xf6>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff0:	e003      	b.n	8003ffa <HAL_TIM_PWM_Start+0xfe>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2201      	movs	r2, #1
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fd0c 	bl	8004a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a38      	ldr	r2, [pc, #224]	; (80040f0 <HAL_TIM_PWM_Start+0x1f4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_TIM_PWM_Start+0x13e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a37      	ldr	r2, [pc, #220]	; (80040f4 <HAL_TIM_PWM_Start+0x1f8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00e      	beq.n	800403a <HAL_TIM_PWM_Start+0x13e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a35      	ldr	r2, [pc, #212]	; (80040f8 <HAL_TIM_PWM_Start+0x1fc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_TIM_PWM_Start+0x13e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a34      	ldr	r2, [pc, #208]	; (80040fc <HAL_TIM_PWM_Start+0x200>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_TIM_PWM_Start+0x13e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a32      	ldr	r2, [pc, #200]	; (8004100 <HAL_TIM_PWM_Start+0x204>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <HAL_TIM_PWM_Start+0x142>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_TIM_PWM_Start+0x144>
 800403e:	2300      	movs	r3, #0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004052:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a25      	ldr	r2, [pc, #148]	; (80040f0 <HAL_TIM_PWM_Start+0x1f4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d022      	beq.n	80040a4 <HAL_TIM_PWM_Start+0x1a8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004066:	d01d      	beq.n	80040a4 <HAL_TIM_PWM_Start+0x1a8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a25      	ldr	r2, [pc, #148]	; (8004104 <HAL_TIM_PWM_Start+0x208>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d018      	beq.n	80040a4 <HAL_TIM_PWM_Start+0x1a8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a24      	ldr	r2, [pc, #144]	; (8004108 <HAL_TIM_PWM_Start+0x20c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <HAL_TIM_PWM_Start+0x1a8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a22      	ldr	r2, [pc, #136]	; (800410c <HAL_TIM_PWM_Start+0x210>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00e      	beq.n	80040a4 <HAL_TIM_PWM_Start+0x1a8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1a      	ldr	r2, [pc, #104]	; (80040f4 <HAL_TIM_PWM_Start+0x1f8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d009      	beq.n	80040a4 <HAL_TIM_PWM_Start+0x1a8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <HAL_TIM_PWM_Start+0x214>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d004      	beq.n	80040a4 <HAL_TIM_PWM_Start+0x1a8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <HAL_TIM_PWM_Start+0x1fc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d115      	bne.n	80040d0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_TIM_PWM_Start+0x218>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	d015      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x1e6>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040bc:	d011      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ce:	e008      	b.n	80040e2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	e000      	b.n	80040e4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40010400 	.word	0x40010400
 80040f8:	40014000 	.word	0x40014000
 80040fc:	40014400 	.word	0x40014400
 8004100:	40014800 	.word	0x40014800
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40000c00 	.word	0x40000c00
 8004110:	40001800 	.word	0x40001800
 8004114:	00010007 	.word	0x00010007

08004118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004132:	2302      	movs	r3, #2
 8004134:	e0ff      	b.n	8004336 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b14      	cmp	r3, #20
 8004142:	f200 80f0 	bhi.w	8004326 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004146:	a201      	add	r2, pc, #4	; (adr r2, 800414c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	080041a1 	.word	0x080041a1
 8004150:	08004327 	.word	0x08004327
 8004154:	08004327 	.word	0x08004327
 8004158:	08004327 	.word	0x08004327
 800415c:	080041e1 	.word	0x080041e1
 8004160:	08004327 	.word	0x08004327
 8004164:	08004327 	.word	0x08004327
 8004168:	08004327 	.word	0x08004327
 800416c:	08004223 	.word	0x08004223
 8004170:	08004327 	.word	0x08004327
 8004174:	08004327 	.word	0x08004327
 8004178:	08004327 	.word	0x08004327
 800417c:	08004263 	.word	0x08004263
 8004180:	08004327 	.word	0x08004327
 8004184:	08004327 	.word	0x08004327
 8004188:	08004327 	.word	0x08004327
 800418c:	080042a5 	.word	0x080042a5
 8004190:	08004327 	.word	0x08004327
 8004194:	08004327 	.word	0x08004327
 8004198:	08004327 	.word	0x08004327
 800419c:	080042e5 	.word	0x080042e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f964 	bl	8004474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0208 	orr.w	r2, r2, #8
 80041ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0204 	bic.w	r2, r2, #4
 80041ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6999      	ldr	r1, [r3, #24]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	619a      	str	r2, [r3, #24]
      break;
 80041de:	e0a5      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f9d4 	bl	8004594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6999      	ldr	r1, [r3, #24]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	021a      	lsls	r2, r3, #8
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	619a      	str	r2, [r3, #24]
      break;
 8004220:	e084      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fa3d 	bl	80046a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0208 	orr.w	r2, r2, #8
 800423c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0204 	bic.w	r2, r2, #4
 800424c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69d9      	ldr	r1, [r3, #28]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	61da      	str	r2, [r3, #28]
      break;
 8004260:	e064      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	4618      	mov	r0, r3
 800426a:	f000 faa5 	bl	80047b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800427c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69d9      	ldr	r1, [r3, #28]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	021a      	lsls	r2, r3, #8
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	61da      	str	r2, [r3, #28]
      break;
 80042a2:	e043      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 faee 	bl	800488c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0208 	orr.w	r2, r2, #8
 80042be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0204 	bic.w	r2, r2, #4
 80042ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042e2:	e023      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fb32 	bl	8004954 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	021a      	lsls	r2, r3, #8
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004324:	e002      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
      break;
 800432a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004334:	7dfb      	ldrb	r3, [r7, #23]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop

08004340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a40      	ldr	r2, [pc, #256]	; (8004454 <TIM_Base_SetConfig+0x114>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d013      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435e:	d00f      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a3d      	ldr	r2, [pc, #244]	; (8004458 <TIM_Base_SetConfig+0x118>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00b      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a3c      	ldr	r2, [pc, #240]	; (800445c <TIM_Base_SetConfig+0x11c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d007      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a3b      	ldr	r2, [pc, #236]	; (8004460 <TIM_Base_SetConfig+0x120>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a3a      	ldr	r2, [pc, #232]	; (8004464 <TIM_Base_SetConfig+0x124>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d108      	bne.n	8004392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2f      	ldr	r2, [pc, #188]	; (8004454 <TIM_Base_SetConfig+0x114>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01f      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a0:	d01b      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2c      	ldr	r2, [pc, #176]	; (8004458 <TIM_Base_SetConfig+0x118>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d017      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2b      	ldr	r2, [pc, #172]	; (800445c <TIM_Base_SetConfig+0x11c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a2a      	ldr	r2, [pc, #168]	; (8004460 <TIM_Base_SetConfig+0x120>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00f      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a29      	ldr	r2, [pc, #164]	; (8004464 <TIM_Base_SetConfig+0x124>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00b      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a28      	ldr	r2, [pc, #160]	; (8004468 <TIM_Base_SetConfig+0x128>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a27      	ldr	r2, [pc, #156]	; (800446c <TIM_Base_SetConfig+0x12c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a26      	ldr	r2, [pc, #152]	; (8004470 <TIM_Base_SetConfig+0x130>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d108      	bne.n	80043ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a10      	ldr	r2, [pc, #64]	; (8004454 <TIM_Base_SetConfig+0x114>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00f      	beq.n	8004438 <TIM_Base_SetConfig+0xf8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <TIM_Base_SetConfig+0x124>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00b      	beq.n	8004438 <TIM_Base_SetConfig+0xf8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a11      	ldr	r2, [pc, #68]	; (8004468 <TIM_Base_SetConfig+0x128>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d007      	beq.n	8004438 <TIM_Base_SetConfig+0xf8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a10      	ldr	r2, [pc, #64]	; (800446c <TIM_Base_SetConfig+0x12c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_Base_SetConfig+0xf8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a0f      	ldr	r2, [pc, #60]	; (8004470 <TIM_Base_SetConfig+0x130>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d103      	bne.n	8004440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	615a      	str	r2, [r3, #20]
}
 8004446:	bf00      	nop
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40010000 	.word	0x40010000
 8004458:	40000400 	.word	0x40000400
 800445c:	40000800 	.word	0x40000800
 8004460:	40000c00 	.word	0x40000c00
 8004464:	40010400 	.word	0x40010400
 8004468:	40014000 	.word	0x40014000
 800446c:	40014400 	.word	0x40014400
 8004470:	40014800 	.word	0x40014800

08004474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4b37      	ldr	r3, [pc, #220]	; (800457c <TIM_OC1_SetConfig+0x108>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 0302 	bic.w	r3, r3, #2
 80044bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <TIM_OC1_SetConfig+0x10c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00f      	beq.n	80044f0 <TIM_OC1_SetConfig+0x7c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <TIM_OC1_SetConfig+0x110>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_OC1_SetConfig+0x7c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a2b      	ldr	r2, [pc, #172]	; (8004588 <TIM_OC1_SetConfig+0x114>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <TIM_OC1_SetConfig+0x7c>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a2a      	ldr	r2, [pc, #168]	; (800458c <TIM_OC1_SetConfig+0x118>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_OC1_SetConfig+0x7c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a29      	ldr	r2, [pc, #164]	; (8004590 <TIM_OC1_SetConfig+0x11c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d10c      	bne.n	800450a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f023 0308 	bic.w	r3, r3, #8
 80044f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f023 0304 	bic.w	r3, r3, #4
 8004508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1c      	ldr	r2, [pc, #112]	; (8004580 <TIM_OC1_SetConfig+0x10c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00f      	beq.n	8004532 <TIM_OC1_SetConfig+0xbe>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <TIM_OC1_SetConfig+0x110>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00b      	beq.n	8004532 <TIM_OC1_SetConfig+0xbe>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a1a      	ldr	r2, [pc, #104]	; (8004588 <TIM_OC1_SetConfig+0x114>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <TIM_OC1_SetConfig+0xbe>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a19      	ldr	r2, [pc, #100]	; (800458c <TIM_OC1_SetConfig+0x118>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_OC1_SetConfig+0xbe>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a18      	ldr	r2, [pc, #96]	; (8004590 <TIM_OC1_SetConfig+0x11c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d111      	bne.n	8004556 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	fffeff8f 	.word	0xfffeff8f
 8004580:	40010000 	.word	0x40010000
 8004584:	40010400 	.word	0x40010400
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400
 8004590:	40014800 	.word	0x40014800

08004594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f023 0210 	bic.w	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4b34      	ldr	r3, [pc, #208]	; (8004690 <TIM_OC2_SetConfig+0xfc>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f023 0320 	bic.w	r3, r3, #32
 80045de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a29      	ldr	r2, [pc, #164]	; (8004694 <TIM_OC2_SetConfig+0x100>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d003      	beq.n	80045fc <TIM_OC2_SetConfig+0x68>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a28      	ldr	r2, [pc, #160]	; (8004698 <TIM_OC2_SetConfig+0x104>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d10d      	bne.n	8004618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <TIM_OC2_SetConfig+0x100>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00f      	beq.n	8004640 <TIM_OC2_SetConfig+0xac>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <TIM_OC2_SetConfig+0x104>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00b      	beq.n	8004640 <TIM_OC2_SetConfig+0xac>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a1c      	ldr	r2, [pc, #112]	; (800469c <TIM_OC2_SetConfig+0x108>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_OC2_SetConfig+0xac>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <TIM_OC2_SetConfig+0x10c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC2_SetConfig+0xac>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a1a      	ldr	r2, [pc, #104]	; (80046a4 <TIM_OC2_SetConfig+0x110>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d113      	bne.n	8004668 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800464e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	feff8fff 	.word	0xfeff8fff
 8004694:	40010000 	.word	0x40010000
 8004698:	40010400 	.word	0x40010400
 800469c:	40014000 	.word	0x40014000
 80046a0:	40014400 	.word	0x40014400
 80046a4:	40014800 	.word	0x40014800

080046a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <TIM_OC3_SetConfig+0xf8>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a28      	ldr	r2, [pc, #160]	; (80047a4 <TIM_OC3_SetConfig+0xfc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <TIM_OC3_SetConfig+0x66>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <TIM_OC3_SetConfig+0x100>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d10d      	bne.n	800472a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <TIM_OC3_SetConfig+0xfc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00f      	beq.n	8004752 <TIM_OC3_SetConfig+0xaa>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <TIM_OC3_SetConfig+0x100>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00b      	beq.n	8004752 <TIM_OC3_SetConfig+0xaa>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1b      	ldr	r2, [pc, #108]	; (80047ac <TIM_OC3_SetConfig+0x104>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d007      	beq.n	8004752 <TIM_OC3_SetConfig+0xaa>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a1a      	ldr	r2, [pc, #104]	; (80047b0 <TIM_OC3_SetConfig+0x108>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_OC3_SetConfig+0xaa>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <TIM_OC3_SetConfig+0x10c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d113      	bne.n	800477a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	621a      	str	r2, [r3, #32]
}
 8004794:	bf00      	nop
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	fffeff8f 	.word	0xfffeff8f
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40010400 	.word	0x40010400
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40014400 	.word	0x40014400
 80047b4:	40014800 	.word	0x40014800

080047b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <TIM_OC4_SetConfig+0xbc>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	031b      	lsls	r3, r3, #12
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a19      	ldr	r2, [pc, #100]	; (8004878 <TIM_OC4_SetConfig+0xc0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00f      	beq.n	8004838 <TIM_OC4_SetConfig+0x80>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a18      	ldr	r2, [pc, #96]	; (800487c <TIM_OC4_SetConfig+0xc4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00b      	beq.n	8004838 <TIM_OC4_SetConfig+0x80>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a17      	ldr	r2, [pc, #92]	; (8004880 <TIM_OC4_SetConfig+0xc8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <TIM_OC4_SetConfig+0x80>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a16      	ldr	r2, [pc, #88]	; (8004884 <TIM_OC4_SetConfig+0xcc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_OC4_SetConfig+0x80>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <TIM_OC4_SetConfig+0xd0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d109      	bne.n	800484c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800483e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	019b      	lsls	r3, r3, #6
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	feff8fff 	.word	0xfeff8fff
 8004878:	40010000 	.word	0x40010000
 800487c:	40010400 	.word	0x40010400
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800

0800488c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4b21      	ldr	r3, [pc, #132]	; (800493c <TIM_OC5_SetConfig+0xb0>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	041b      	lsls	r3, r3, #16
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a18      	ldr	r2, [pc, #96]	; (8004940 <TIM_OC5_SetConfig+0xb4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00f      	beq.n	8004902 <TIM_OC5_SetConfig+0x76>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a17      	ldr	r2, [pc, #92]	; (8004944 <TIM_OC5_SetConfig+0xb8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00b      	beq.n	8004902 <TIM_OC5_SetConfig+0x76>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a16      	ldr	r2, [pc, #88]	; (8004948 <TIM_OC5_SetConfig+0xbc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d007      	beq.n	8004902 <TIM_OC5_SetConfig+0x76>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <TIM_OC5_SetConfig+0xc0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <TIM_OC5_SetConfig+0x76>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <TIM_OC5_SetConfig+0xc4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d109      	bne.n	8004916 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004908:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	621a      	str	r2, [r3, #32]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	fffeff8f 	.word	0xfffeff8f
 8004940:	40010000 	.word	0x40010000
 8004944:	40010400 	.word	0x40010400
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800

08004954 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <TIM_OC6_SetConfig+0xb4>)
 8004980:	4013      	ands	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	051b      	lsls	r3, r3, #20
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a19      	ldr	r2, [pc, #100]	; (8004a0c <TIM_OC6_SetConfig+0xb8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00f      	beq.n	80049cc <TIM_OC6_SetConfig+0x78>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a18      	ldr	r2, [pc, #96]	; (8004a10 <TIM_OC6_SetConfig+0xbc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00b      	beq.n	80049cc <TIM_OC6_SetConfig+0x78>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a17      	ldr	r2, [pc, #92]	; (8004a14 <TIM_OC6_SetConfig+0xc0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_OC6_SetConfig+0x78>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a16      	ldr	r2, [pc, #88]	; (8004a18 <TIM_OC6_SetConfig+0xc4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_OC6_SetConfig+0x78>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a15      	ldr	r2, [pc, #84]	; (8004a1c <TIM_OC6_SetConfig+0xc8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d109      	bne.n	80049e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	029b      	lsls	r3, r3, #10
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	621a      	str	r2, [r3, #32]
}
 80049fa:	bf00      	nop
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	feff8fff 	.word	0xfeff8fff
 8004a0c:	40010000 	.word	0x40010000
 8004a10:	40010400 	.word	0x40010400
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800

08004a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	2201      	movs	r2, #1
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1a      	ldr	r2, [r3, #32]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	43db      	mvns	r3, r3
 8004a42:	401a      	ands	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a1a      	ldr	r2, [r3, #32]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	fa01 f303 	lsl.w	r3, r1, r3
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	621a      	str	r2, [r3, #32]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e042      	b.n	8004b02 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fc f9a8 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2224      	movs	r2, #36	; 0x24
 8004a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f82d 	bl	8004b0c <UART_SetConfig>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e022      	b.n	8004b02 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fd89 	bl	80055dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0201 	orr.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fe10 	bl	8005720 <UART_CheckIdleState>
 8004b00:	4603      	mov	r3, r0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b10:	b092      	sub	sp, #72	; 0x48
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4bbe      	ldr	r3, [pc, #760]	; (8004e34 <UART_SetConfig+0x328>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b44:	430b      	orrs	r3, r1
 8004b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4ab3      	ldr	r2, [pc, #716]	; (8004e38 <UART_SetConfig+0x32c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b74:	4313      	orrs	r3, r2
 8004b76:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	4baf      	ldr	r3, [pc, #700]	; (8004e3c <UART_SetConfig+0x330>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	6812      	ldr	r2, [r2, #0]
 8004b86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	f023 010f 	bic.w	r1, r3, #15
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4aa6      	ldr	r2, [pc, #664]	; (8004e40 <UART_SetConfig+0x334>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d177      	bne.n	8004c9c <UART_SetConfig+0x190>
 8004bac:	4ba5      	ldr	r3, [pc, #660]	; (8004e44 <UART_SetConfig+0x338>)
 8004bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb4:	2b28      	cmp	r3, #40	; 0x28
 8004bb6:	d86d      	bhi.n	8004c94 <UART_SetConfig+0x188>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <UART_SetConfig+0xb4>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004c65 	.word	0x08004c65
 8004bc4:	08004c95 	.word	0x08004c95
 8004bc8:	08004c95 	.word	0x08004c95
 8004bcc:	08004c95 	.word	0x08004c95
 8004bd0:	08004c95 	.word	0x08004c95
 8004bd4:	08004c95 	.word	0x08004c95
 8004bd8:	08004c95 	.word	0x08004c95
 8004bdc:	08004c95 	.word	0x08004c95
 8004be0:	08004c6d 	.word	0x08004c6d
 8004be4:	08004c95 	.word	0x08004c95
 8004be8:	08004c95 	.word	0x08004c95
 8004bec:	08004c95 	.word	0x08004c95
 8004bf0:	08004c95 	.word	0x08004c95
 8004bf4:	08004c95 	.word	0x08004c95
 8004bf8:	08004c95 	.word	0x08004c95
 8004bfc:	08004c95 	.word	0x08004c95
 8004c00:	08004c75 	.word	0x08004c75
 8004c04:	08004c95 	.word	0x08004c95
 8004c08:	08004c95 	.word	0x08004c95
 8004c0c:	08004c95 	.word	0x08004c95
 8004c10:	08004c95 	.word	0x08004c95
 8004c14:	08004c95 	.word	0x08004c95
 8004c18:	08004c95 	.word	0x08004c95
 8004c1c:	08004c95 	.word	0x08004c95
 8004c20:	08004c7d 	.word	0x08004c7d
 8004c24:	08004c95 	.word	0x08004c95
 8004c28:	08004c95 	.word	0x08004c95
 8004c2c:	08004c95 	.word	0x08004c95
 8004c30:	08004c95 	.word	0x08004c95
 8004c34:	08004c95 	.word	0x08004c95
 8004c38:	08004c95 	.word	0x08004c95
 8004c3c:	08004c95 	.word	0x08004c95
 8004c40:	08004c85 	.word	0x08004c85
 8004c44:	08004c95 	.word	0x08004c95
 8004c48:	08004c95 	.word	0x08004c95
 8004c4c:	08004c95 	.word	0x08004c95
 8004c50:	08004c95 	.word	0x08004c95
 8004c54:	08004c95 	.word	0x08004c95
 8004c58:	08004c95 	.word	0x08004c95
 8004c5c:	08004c95 	.word	0x08004c95
 8004c60:	08004c8d 	.word	0x08004c8d
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6a:	e222      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c72:	e21e      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004c74:	2308      	movs	r3, #8
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7a:	e21a      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c82:	e216      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004c84:	2320      	movs	r3, #32
 8004c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8a:	e212      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004c8c:	2340      	movs	r3, #64	; 0x40
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c92:	e20e      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c9a:	e20a      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a69      	ldr	r2, [pc, #420]	; (8004e48 <UART_SetConfig+0x33c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d130      	bne.n	8004d08 <UART_SetConfig+0x1fc>
 8004ca6:	4b67      	ldr	r3, [pc, #412]	; (8004e44 <UART_SetConfig+0x338>)
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	2b05      	cmp	r3, #5
 8004cb0:	d826      	bhi.n	8004d00 <UART_SetConfig+0x1f4>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0x1ac>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cd1 	.word	0x08004cd1
 8004cbc:	08004cd9 	.word	0x08004cd9
 8004cc0:	08004ce1 	.word	0x08004ce1
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004cf9 	.word	0x08004cf9
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd6:	e1ec      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cde:	e1e8      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce6:	e1e4      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cee:	e1e0      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004cf0:	2320      	movs	r3, #32
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf6:	e1dc      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004cf8:	2340      	movs	r3, #64	; 0x40
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfe:	e1d8      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d06:	e1d4      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a4f      	ldr	r2, [pc, #316]	; (8004e4c <UART_SetConfig+0x340>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d130      	bne.n	8004d74 <UART_SetConfig+0x268>
 8004d12:	4b4c      	ldr	r3, [pc, #304]	; (8004e44 <UART_SetConfig+0x338>)
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d826      	bhi.n	8004d6c <UART_SetConfig+0x260>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <UART_SetConfig+0x218>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d3d 	.word	0x08004d3d
 8004d28:	08004d45 	.word	0x08004d45
 8004d2c:	08004d4d 	.word	0x08004d4d
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d5d 	.word	0x08004d5d
 8004d38:	08004d65 	.word	0x08004d65
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d42:	e1b6      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004d44:	2304      	movs	r3, #4
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4a:	e1b2      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004d4c:	2308      	movs	r3, #8
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d52:	e1ae      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004d54:	2310      	movs	r3, #16
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5a:	e1aa      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004d5c:	2320      	movs	r3, #32
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d62:	e1a6      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004d64:	2340      	movs	r3, #64	; 0x40
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6a:	e1a2      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d72:	e19e      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a35      	ldr	r2, [pc, #212]	; (8004e50 <UART_SetConfig+0x344>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d130      	bne.n	8004de0 <UART_SetConfig+0x2d4>
 8004d7e:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <UART_SetConfig+0x338>)
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	2b05      	cmp	r3, #5
 8004d88:	d826      	bhi.n	8004dd8 <UART_SetConfig+0x2cc>
 8004d8a:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <UART_SetConfig+0x284>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004da9 	.word	0x08004da9
 8004d94:	08004db1 	.word	0x08004db1
 8004d98:	08004db9 	.word	0x08004db9
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dc9 	.word	0x08004dc9
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	2300      	movs	r3, #0
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dae:	e180      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004db0:	2304      	movs	r3, #4
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db6:	e17c      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004db8:	2308      	movs	r3, #8
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dbe:	e178      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc6:	e174      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004dc8:	2320      	movs	r3, #32
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dce:	e170      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004dd0:	2340      	movs	r3, #64	; 0x40
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd6:	e16c      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dde:	e168      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <UART_SetConfig+0x348>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d142      	bne.n	8004e70 <UART_SetConfig+0x364>
 8004dea:	4b16      	ldr	r3, [pc, #88]	; (8004e44 <UART_SetConfig+0x338>)
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	d838      	bhi.n	8004e68 <UART_SetConfig+0x35c>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <UART_SetConfig+0x2f0>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e15 	.word	0x08004e15
 8004e00:	08004e1d 	.word	0x08004e1d
 8004e04:	08004e25 	.word	0x08004e25
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e59 	.word	0x08004e59
 8004e10:	08004e61 	.word	0x08004e61
 8004e14:	2300      	movs	r3, #0
 8004e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1a:	e14a      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e22:	e146      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004e24:	2308      	movs	r3, #8
 8004e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2a:	e142      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004e2c:	2310      	movs	r3, #16
 8004e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e32:	e13e      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004e34:	cfff69f3 	.word	0xcfff69f3
 8004e38:	58000c00 	.word	0x58000c00
 8004e3c:	11fff4ff 	.word	0x11fff4ff
 8004e40:	40011000 	.word	0x40011000
 8004e44:	58024400 	.word	0x58024400
 8004e48:	40004400 	.word	0x40004400
 8004e4c:	40004800 	.word	0x40004800
 8004e50:	40004c00 	.word	0x40004c00
 8004e54:	40005000 	.word	0x40005000
 8004e58:	2320      	movs	r3, #32
 8004e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e5e:	e128      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004e60:	2340      	movs	r3, #64	; 0x40
 8004e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e66:	e124      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e6e:	e120      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4acb      	ldr	r2, [pc, #812]	; (80051a4 <UART_SetConfig+0x698>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d176      	bne.n	8004f68 <UART_SetConfig+0x45c>
 8004e7a:	4bcb      	ldr	r3, [pc, #812]	; (80051a8 <UART_SetConfig+0x69c>)
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e82:	2b28      	cmp	r3, #40	; 0x28
 8004e84:	d86c      	bhi.n	8004f60 <UART_SetConfig+0x454>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <UART_SetConfig+0x380>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004f31 	.word	0x08004f31
 8004e90:	08004f61 	.word	0x08004f61
 8004e94:	08004f61 	.word	0x08004f61
 8004e98:	08004f61 	.word	0x08004f61
 8004e9c:	08004f61 	.word	0x08004f61
 8004ea0:	08004f61 	.word	0x08004f61
 8004ea4:	08004f61 	.word	0x08004f61
 8004ea8:	08004f61 	.word	0x08004f61
 8004eac:	08004f39 	.word	0x08004f39
 8004eb0:	08004f61 	.word	0x08004f61
 8004eb4:	08004f61 	.word	0x08004f61
 8004eb8:	08004f61 	.word	0x08004f61
 8004ebc:	08004f61 	.word	0x08004f61
 8004ec0:	08004f61 	.word	0x08004f61
 8004ec4:	08004f61 	.word	0x08004f61
 8004ec8:	08004f61 	.word	0x08004f61
 8004ecc:	08004f41 	.word	0x08004f41
 8004ed0:	08004f61 	.word	0x08004f61
 8004ed4:	08004f61 	.word	0x08004f61
 8004ed8:	08004f61 	.word	0x08004f61
 8004edc:	08004f61 	.word	0x08004f61
 8004ee0:	08004f61 	.word	0x08004f61
 8004ee4:	08004f61 	.word	0x08004f61
 8004ee8:	08004f61 	.word	0x08004f61
 8004eec:	08004f49 	.word	0x08004f49
 8004ef0:	08004f61 	.word	0x08004f61
 8004ef4:	08004f61 	.word	0x08004f61
 8004ef8:	08004f61 	.word	0x08004f61
 8004efc:	08004f61 	.word	0x08004f61
 8004f00:	08004f61 	.word	0x08004f61
 8004f04:	08004f61 	.word	0x08004f61
 8004f08:	08004f61 	.word	0x08004f61
 8004f0c:	08004f51 	.word	0x08004f51
 8004f10:	08004f61 	.word	0x08004f61
 8004f14:	08004f61 	.word	0x08004f61
 8004f18:	08004f61 	.word	0x08004f61
 8004f1c:	08004f61 	.word	0x08004f61
 8004f20:	08004f61 	.word	0x08004f61
 8004f24:	08004f61 	.word	0x08004f61
 8004f28:	08004f61 	.word	0x08004f61
 8004f2c:	08004f59 	.word	0x08004f59
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f36:	e0bc      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3e:	e0b8      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004f40:	2308      	movs	r3, #8
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f46:	e0b4      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4e:	e0b0      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004f50:	2320      	movs	r3, #32
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e0ac      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004f58:	2340      	movs	r3, #64	; 0x40
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5e:	e0a8      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f66:	e0a4      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a8f      	ldr	r2, [pc, #572]	; (80051ac <UART_SetConfig+0x6a0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d130      	bne.n	8004fd4 <UART_SetConfig+0x4c8>
 8004f72:	4b8d      	ldr	r3, [pc, #564]	; (80051a8 <UART_SetConfig+0x69c>)
 8004f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d826      	bhi.n	8004fcc <UART_SetConfig+0x4c0>
 8004f7e:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <UART_SetConfig+0x478>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004f9d 	.word	0x08004f9d
 8004f88:	08004fa5 	.word	0x08004fa5
 8004f8c:	08004fad 	.word	0x08004fad
 8004f90:	08004fb5 	.word	0x08004fb5
 8004f94:	08004fbd 	.word	0x08004fbd
 8004f98:	08004fc5 	.word	0x08004fc5
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e086      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e082      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004fac:	2308      	movs	r3, #8
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e07e      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e07a      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e076      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e072      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd2:	e06e      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a75      	ldr	r2, [pc, #468]	; (80051b0 <UART_SetConfig+0x6a4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d130      	bne.n	8005040 <UART_SetConfig+0x534>
 8004fde:	4b72      	ldr	r3, [pc, #456]	; (80051a8 <UART_SetConfig+0x69c>)
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d826      	bhi.n	8005038 <UART_SetConfig+0x52c>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0x4e4>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005009 	.word	0x08005009
 8004ff4:	08005011 	.word	0x08005011
 8004ff8:	08005019 	.word	0x08005019
 8004ffc:	08005021 	.word	0x08005021
 8005000:	08005029 	.word	0x08005029
 8005004:	08005031 	.word	0x08005031
 8005008:	2300      	movs	r3, #0
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e050      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8005010:	2304      	movs	r3, #4
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e04c      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8005018:	2308      	movs	r3, #8
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e048      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8005020:	2310      	movs	r3, #16
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e044      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8005028:	2320      	movs	r3, #32
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e040      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8005030:	2340      	movs	r3, #64	; 0x40
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e03c      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503e:	e038      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a5b      	ldr	r2, [pc, #364]	; (80051b4 <UART_SetConfig+0x6a8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d130      	bne.n	80050ac <UART_SetConfig+0x5a0>
 800504a:	4b57      	ldr	r3, [pc, #348]	; (80051a8 <UART_SetConfig+0x69c>)
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	2b05      	cmp	r3, #5
 8005054:	d826      	bhi.n	80050a4 <UART_SetConfig+0x598>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <UART_SetConfig+0x550>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	08005075 	.word	0x08005075
 8005060:	0800507d 	.word	0x0800507d
 8005064:	08005085 	.word	0x08005085
 8005068:	0800508d 	.word	0x0800508d
 800506c:	08005095 	.word	0x08005095
 8005070:	0800509d 	.word	0x0800509d
 8005074:	2302      	movs	r3, #2
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e01a      	b.n	80050b2 <UART_SetConfig+0x5a6>
 800507c:	2304      	movs	r3, #4
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e016      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8005084:	2308      	movs	r3, #8
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508a:	e012      	b.n	80050b2 <UART_SetConfig+0x5a6>
 800508c:	2310      	movs	r3, #16
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005092:	e00e      	b.n	80050b2 <UART_SetConfig+0x5a6>
 8005094:	2320      	movs	r3, #32
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e00a      	b.n	80050b2 <UART_SetConfig+0x5a6>
 800509c:	2340      	movs	r3, #64	; 0x40
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a2:	e006      	b.n	80050b2 <UART_SetConfig+0x5a6>
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050aa:	e002      	b.n	80050b2 <UART_SetConfig+0x5a6>
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a3f      	ldr	r2, [pc, #252]	; (80051b4 <UART_SetConfig+0x6a8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	f040 80f8 	bne.w	80052ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	dc46      	bgt.n	8005154 <UART_SetConfig+0x648>
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	f2c0 8082 	blt.w	80051d0 <UART_SetConfig+0x6c4>
 80050cc:	3b02      	subs	r3, #2
 80050ce:	2b1e      	cmp	r3, #30
 80050d0:	d87e      	bhi.n	80051d0 <UART_SetConfig+0x6c4>
 80050d2:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <UART_SetConfig+0x5cc>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	0800515b 	.word	0x0800515b
 80050dc:	080051d1 	.word	0x080051d1
 80050e0:	08005163 	.word	0x08005163
 80050e4:	080051d1 	.word	0x080051d1
 80050e8:	080051d1 	.word	0x080051d1
 80050ec:	080051d1 	.word	0x080051d1
 80050f0:	08005173 	.word	0x08005173
 80050f4:	080051d1 	.word	0x080051d1
 80050f8:	080051d1 	.word	0x080051d1
 80050fc:	080051d1 	.word	0x080051d1
 8005100:	080051d1 	.word	0x080051d1
 8005104:	080051d1 	.word	0x080051d1
 8005108:	080051d1 	.word	0x080051d1
 800510c:	080051d1 	.word	0x080051d1
 8005110:	08005183 	.word	0x08005183
 8005114:	080051d1 	.word	0x080051d1
 8005118:	080051d1 	.word	0x080051d1
 800511c:	080051d1 	.word	0x080051d1
 8005120:	080051d1 	.word	0x080051d1
 8005124:	080051d1 	.word	0x080051d1
 8005128:	080051d1 	.word	0x080051d1
 800512c:	080051d1 	.word	0x080051d1
 8005130:	080051d1 	.word	0x080051d1
 8005134:	080051d1 	.word	0x080051d1
 8005138:	080051d1 	.word	0x080051d1
 800513c:	080051d1 	.word	0x080051d1
 8005140:	080051d1 	.word	0x080051d1
 8005144:	080051d1 	.word	0x080051d1
 8005148:	080051d1 	.word	0x080051d1
 800514c:	080051d1 	.word	0x080051d1
 8005150:	080051c3 	.word	0x080051c3
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d037      	beq.n	80051c8 <UART_SetConfig+0x6bc>
 8005158:	e03a      	b.n	80051d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800515a:	f7fe f9f5 	bl	8003548 <HAL_RCCEx_GetD3PCLK1Freq>
 800515e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005160:	e03c      	b.n	80051dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fa04 	bl	8003574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005170:	e034      	b.n	80051dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005172:	f107 0318 	add.w	r3, r7, #24
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe fb50 	bl	800381c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005180:	e02c      	b.n	80051dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005182:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <UART_SetConfig+0x69c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d016      	beq.n	80051bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800518e:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <UART_SetConfig+0x69c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	08db      	lsrs	r3, r3, #3
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	4a07      	ldr	r2, [pc, #28]	; (80051b8 <UART_SetConfig+0x6ac>)
 800519a:	fa22 f303 	lsr.w	r3, r2, r3
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051a0:	e01c      	b.n	80051dc <UART_SetConfig+0x6d0>
 80051a2:	bf00      	nop
 80051a4:	40011400 	.word	0x40011400
 80051a8:	58024400 	.word	0x58024400
 80051ac:	40007800 	.word	0x40007800
 80051b0:	40007c00 	.word	0x40007c00
 80051b4:	58000c00 	.word	0x58000c00
 80051b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80051bc:	4b9d      	ldr	r3, [pc, #628]	; (8005434 <UART_SetConfig+0x928>)
 80051be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051c0:	e00c      	b.n	80051dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051c2:	4b9d      	ldr	r3, [pc, #628]	; (8005438 <UART_SetConfig+0x92c>)
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051c6:	e009      	b.n	80051dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051ce:	e005      	b.n	80051dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80051da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 81de 	beq.w	80055a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	4a94      	ldr	r2, [pc, #592]	; (800543c <UART_SetConfig+0x930>)
 80051ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ee:	461a      	mov	r2, r3
 80051f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80051f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	4413      	add	r3, r2
 8005202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005204:	429a      	cmp	r2, r3
 8005206:	d305      	bcc.n	8005214 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800520e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005210:	429a      	cmp	r2, r3
 8005212:	d903      	bls.n	800521c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800521a:	e1c1      	b.n	80055a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800521c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800521e:	2200      	movs	r2, #0
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	60fa      	str	r2, [r7, #12]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	4a84      	ldr	r2, [pc, #528]	; (800543c <UART_SetConfig+0x930>)
 800522a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800522e:	b29b      	uxth	r3, r3
 8005230:	2200      	movs	r2, #0
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800523a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800523e:	f7fb f84b 	bl	80002d8 <__aeabi_uldivmod>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	020b      	lsls	r3, r1, #8
 8005254:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005258:	0202      	lsls	r2, r0, #8
 800525a:	6979      	ldr	r1, [r7, #20]
 800525c:	6849      	ldr	r1, [r1, #4]
 800525e:	0849      	lsrs	r1, r1, #1
 8005260:	2000      	movs	r0, #0
 8005262:	460c      	mov	r4, r1
 8005264:	4605      	mov	r5, r0
 8005266:	eb12 0804 	adds.w	r8, r2, r4
 800526a:	eb43 0905 	adc.w	r9, r3, r5
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	469a      	mov	sl, r3
 8005276:	4693      	mov	fp, r2
 8005278:	4652      	mov	r2, sl
 800527a:	465b      	mov	r3, fp
 800527c:	4640      	mov	r0, r8
 800527e:	4649      	mov	r1, r9
 8005280:	f7fb f82a 	bl	80002d8 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4613      	mov	r3, r2
 800528a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005292:	d308      	bcc.n	80052a6 <UART_SetConfig+0x79a>
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529a:	d204      	bcs.n	80052a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052a2:	60da      	str	r2, [r3, #12]
 80052a4:	e17c      	b.n	80055a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80052ac:	e178      	b.n	80055a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b6:	f040 80c5 	bne.w	8005444 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80052ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80052be:	2b20      	cmp	r3, #32
 80052c0:	dc48      	bgt.n	8005354 <UART_SetConfig+0x848>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	db7b      	blt.n	80053be <UART_SetConfig+0x8b2>
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d879      	bhi.n	80053be <UART_SetConfig+0x8b2>
 80052ca:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <UART_SetConfig+0x7c4>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	0800535b 	.word	0x0800535b
 80052d4:	08005363 	.word	0x08005363
 80052d8:	080053bf 	.word	0x080053bf
 80052dc:	080053bf 	.word	0x080053bf
 80052e0:	0800536b 	.word	0x0800536b
 80052e4:	080053bf 	.word	0x080053bf
 80052e8:	080053bf 	.word	0x080053bf
 80052ec:	080053bf 	.word	0x080053bf
 80052f0:	0800537b 	.word	0x0800537b
 80052f4:	080053bf 	.word	0x080053bf
 80052f8:	080053bf 	.word	0x080053bf
 80052fc:	080053bf 	.word	0x080053bf
 8005300:	080053bf 	.word	0x080053bf
 8005304:	080053bf 	.word	0x080053bf
 8005308:	080053bf 	.word	0x080053bf
 800530c:	080053bf 	.word	0x080053bf
 8005310:	0800538b 	.word	0x0800538b
 8005314:	080053bf 	.word	0x080053bf
 8005318:	080053bf 	.word	0x080053bf
 800531c:	080053bf 	.word	0x080053bf
 8005320:	080053bf 	.word	0x080053bf
 8005324:	080053bf 	.word	0x080053bf
 8005328:	080053bf 	.word	0x080053bf
 800532c:	080053bf 	.word	0x080053bf
 8005330:	080053bf 	.word	0x080053bf
 8005334:	080053bf 	.word	0x080053bf
 8005338:	080053bf 	.word	0x080053bf
 800533c:	080053bf 	.word	0x080053bf
 8005340:	080053bf 	.word	0x080053bf
 8005344:	080053bf 	.word	0x080053bf
 8005348:	080053bf 	.word	0x080053bf
 800534c:	080053bf 	.word	0x080053bf
 8005350:	080053b1 	.word	0x080053b1
 8005354:	2b40      	cmp	r3, #64	; 0x40
 8005356:	d02e      	beq.n	80053b6 <UART_SetConfig+0x8aa>
 8005358:	e031      	b.n	80053be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800535a:	f7fd f983 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 800535e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005360:	e033      	b.n	80053ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005362:	f7fd f995 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8005366:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005368:	e02f      	b.n	80053ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800536a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe f900 	bl	8003574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005378:	e027      	b.n	80053ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800537a:	f107 0318 	add.w	r3, r7, #24
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe fa4c 	bl	800381c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005388:	e01f      	b.n	80053ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800538a:	4b2d      	ldr	r3, [pc, #180]	; (8005440 <UART_SetConfig+0x934>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d009      	beq.n	80053aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005396:	4b2a      	ldr	r3, [pc, #168]	; (8005440 <UART_SetConfig+0x934>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	08db      	lsrs	r3, r3, #3
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	4a24      	ldr	r2, [pc, #144]	; (8005434 <UART_SetConfig+0x928>)
 80053a2:	fa22 f303 	lsr.w	r3, r2, r3
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053a8:	e00f      	b.n	80053ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80053aa:	4b22      	ldr	r3, [pc, #136]	; (8005434 <UART_SetConfig+0x928>)
 80053ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053ae:	e00c      	b.n	80053ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80053b0:	4b21      	ldr	r3, [pc, #132]	; (8005438 <UART_SetConfig+0x92c>)
 80053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053b4:	e009      	b.n	80053ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053bc:	e005      	b.n	80053ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80053c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80e7 	beq.w	80055a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	4a19      	ldr	r2, [pc, #100]	; (800543c <UART_SetConfig+0x930>)
 80053d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053dc:	461a      	mov	r2, r3
 80053de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e4:	005a      	lsls	r2, r3, #1
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	085b      	lsrs	r3, r3, #1
 80053ec:	441a      	add	r2, r3
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	2b0f      	cmp	r3, #15
 80053fc:	d916      	bls.n	800542c <UART_SetConfig+0x920>
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005404:	d212      	bcs.n	800542c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	b29b      	uxth	r3, r3
 800540a:	f023 030f 	bic.w	r3, r3, #15
 800540e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	b29b      	uxth	r3, r3
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	b29a      	uxth	r2, r3
 800541c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800541e:	4313      	orrs	r3, r2
 8005420:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	e0b9      	b.n	80055a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005432:	e0b5      	b.n	80055a0 <UART_SetConfig+0xa94>
 8005434:	03d09000 	.word	0x03d09000
 8005438:	003d0900 	.word	0x003d0900
 800543c:	08005bcc 	.word	0x08005bcc
 8005440:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005444:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005448:	2b20      	cmp	r3, #32
 800544a:	dc49      	bgt.n	80054e0 <UART_SetConfig+0x9d4>
 800544c:	2b00      	cmp	r3, #0
 800544e:	db7c      	blt.n	800554a <UART_SetConfig+0xa3e>
 8005450:	2b20      	cmp	r3, #32
 8005452:	d87a      	bhi.n	800554a <UART_SetConfig+0xa3e>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <UART_SetConfig+0x950>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	080054e7 	.word	0x080054e7
 8005460:	080054ef 	.word	0x080054ef
 8005464:	0800554b 	.word	0x0800554b
 8005468:	0800554b 	.word	0x0800554b
 800546c:	080054f7 	.word	0x080054f7
 8005470:	0800554b 	.word	0x0800554b
 8005474:	0800554b 	.word	0x0800554b
 8005478:	0800554b 	.word	0x0800554b
 800547c:	08005507 	.word	0x08005507
 8005480:	0800554b 	.word	0x0800554b
 8005484:	0800554b 	.word	0x0800554b
 8005488:	0800554b 	.word	0x0800554b
 800548c:	0800554b 	.word	0x0800554b
 8005490:	0800554b 	.word	0x0800554b
 8005494:	0800554b 	.word	0x0800554b
 8005498:	0800554b 	.word	0x0800554b
 800549c:	08005517 	.word	0x08005517
 80054a0:	0800554b 	.word	0x0800554b
 80054a4:	0800554b 	.word	0x0800554b
 80054a8:	0800554b 	.word	0x0800554b
 80054ac:	0800554b 	.word	0x0800554b
 80054b0:	0800554b 	.word	0x0800554b
 80054b4:	0800554b 	.word	0x0800554b
 80054b8:	0800554b 	.word	0x0800554b
 80054bc:	0800554b 	.word	0x0800554b
 80054c0:	0800554b 	.word	0x0800554b
 80054c4:	0800554b 	.word	0x0800554b
 80054c8:	0800554b 	.word	0x0800554b
 80054cc:	0800554b 	.word	0x0800554b
 80054d0:	0800554b 	.word	0x0800554b
 80054d4:	0800554b 	.word	0x0800554b
 80054d8:	0800554b 	.word	0x0800554b
 80054dc:	0800553d 	.word	0x0800553d
 80054e0:	2b40      	cmp	r3, #64	; 0x40
 80054e2:	d02e      	beq.n	8005542 <UART_SetConfig+0xa36>
 80054e4:	e031      	b.n	800554a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e6:	f7fd f8bd 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 80054ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054ec:	e033      	b.n	8005556 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ee:	f7fd f8cf 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 80054f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054f4:	e02f      	b.n	8005556 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe f83a 	bl	8003574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005504:	e027      	b.n	8005556 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005506:	f107 0318 	add.w	r3, r7, #24
 800550a:	4618      	mov	r0, r3
 800550c:	f7fe f986 	bl	800381c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005514:	e01f      	b.n	8005556 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005516:	4b2d      	ldr	r3, [pc, #180]	; (80055cc <UART_SetConfig+0xac0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005522:	4b2a      	ldr	r3, [pc, #168]	; (80055cc <UART_SetConfig+0xac0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	08db      	lsrs	r3, r3, #3
 8005528:	f003 0303 	and.w	r3, r3, #3
 800552c:	4a28      	ldr	r2, [pc, #160]	; (80055d0 <UART_SetConfig+0xac4>)
 800552e:	fa22 f303 	lsr.w	r3, r2, r3
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005534:	e00f      	b.n	8005556 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005536:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <UART_SetConfig+0xac4>)
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800553a:	e00c      	b.n	8005556 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800553c:	4b25      	ldr	r3, [pc, #148]	; (80055d4 <UART_SetConfig+0xac8>)
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005540:	e009      	b.n	8005556 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005548:	e005      	b.n	8005556 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005554:	bf00      	nop
    }

    if (pclk != 0U)
 8005556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d021      	beq.n	80055a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	4a1d      	ldr	r2, [pc, #116]	; (80055d8 <UART_SetConfig+0xacc>)
 8005562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005566:	461a      	mov	r2, r3
 8005568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556a:	fbb3 f2f2 	udiv	r2, r3, r2
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	441a      	add	r2, r3
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	fbb2 f3f3 	udiv	r3, r2, r3
 800557e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	2b0f      	cmp	r3, #15
 8005584:	d909      	bls.n	800559a <UART_SetConfig+0xa8e>
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558c:	d205      	bcs.n	800559a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	b29a      	uxth	r2, r3
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60da      	str	r2, [r3, #12]
 8005598:	e002      	b.n	80055a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2200      	movs	r2, #0
 80055b4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2200      	movs	r2, #0
 80055ba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80055bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3748      	adds	r7, #72	; 0x48
 80055c4:	46bd      	mov	sp, r7
 80055c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ca:	bf00      	nop
 80055cc:	58024400 	.word	0x58024400
 80055d0:	03d09000 	.word	0x03d09000
 80055d4:	003d0900 	.word	0x003d0900
 80055d8:	08005bcc 	.word	0x08005bcc

080055dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01a      	beq.n	80056f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056da:	d10a      	bne.n	80056f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	605a      	str	r2, [r3, #4]
  }
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af02      	add	r7, sp, #8
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005730:	f7fb fc98 	bl	8001064 <HAL_GetTick>
 8005734:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b08      	cmp	r3, #8
 8005742:	d10e      	bne.n	8005762 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f82f 	bl	80057b6 <UART_WaitOnFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e025      	b.n	80057ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b04      	cmp	r3, #4
 800576e:	d10e      	bne.n	800578e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f819 	bl	80057b6 <UART_WaitOnFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e00f      	b.n	80057ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b09c      	sub	sp, #112	; 0x70
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	4613      	mov	r3, r2
 80057c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c6:	e0a9      	b.n	800591c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	f000 80a5 	beq.w	800591c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d2:	f7fb fc47 	bl	8001064 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057de:	429a      	cmp	r2, r3
 80057e0:	d302      	bcc.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80057e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d140      	bne.n	800586a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057fc:	667b      	str	r3, [r7, #100]	; 0x64
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005808:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800580c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e6      	bne.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3308      	adds	r3, #8
 8005820:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	663b      	str	r3, [r7, #96]	; 0x60
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3308      	adds	r3, #8
 8005838:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800583a:	64ba      	str	r2, [r7, #72]	; 0x48
 800583c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e5      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e069      	b.n	800593e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d051      	beq.n	800591c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005886:	d149      	bne.n	800591c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005890:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
 80058b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e6      	bne.n	8005892 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3308      	adds	r3, #8
 80058ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	613b      	str	r3, [r7, #16]
   return(result);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f023 0301 	bic.w	r3, r3, #1
 80058da:	66bb      	str	r3, [r7, #104]	; 0x68
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3308      	adds	r3, #8
 80058e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058e4:	623a      	str	r2, [r7, #32]
 80058e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	69f9      	ldr	r1, [r7, #28]
 80058ea:	6a3a      	ldr	r2, [r7, #32]
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e5      	bne.n	80058c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2220      	movs	r2, #32
 800590c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e010      	b.n	800593e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69da      	ldr	r2, [r3, #28]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4013      	ands	r3, r2
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	429a      	cmp	r2, r3
 800592a:	bf0c      	ite	eq
 800592c:	2301      	moveq	r3, #1
 800592e:	2300      	movne	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	461a      	mov	r2, r3
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	429a      	cmp	r2, r3
 8005938:	f43f af46 	beq.w	80057c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3770      	adds	r7, #112	; 0x70
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_UARTEx_DisableFifoMode+0x16>
 8005958:	2302      	movs	r3, #2
 800595a:	e027      	b.n	80059ac <HAL_UARTEx_DisableFifoMode+0x66>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2224      	movs	r2, #36	; 0x24
 8005968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800598a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e02d      	b.n	8005a2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2224      	movs	r2, #36	; 0x24
 80059dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0201 	bic.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f84f 	bl	8005ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e02d      	b.n	8005aa8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2224      	movs	r2, #36	; 0x24
 8005a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f811 	bl	8005ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d108      	bne.n	8005ad2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ad0:	e031      	b.n	8005b36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ad6:	2310      	movs	r3, #16
 8005ad8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	0e5b      	lsrs	r3, r3, #25
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	0f5b      	lsrs	r3, r3, #29
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005afa:	7bbb      	ldrb	r3, [r7, #14]
 8005afc:	7b3a      	ldrb	r2, [r7, #12]
 8005afe:	4911      	ldr	r1, [pc, #68]	; (8005b44 <UARTEx_SetNbDataToProcess+0x94>)
 8005b00:	5c8a      	ldrb	r2, [r1, r2]
 8005b02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b06:	7b3a      	ldrb	r2, [r7, #12]
 8005b08:	490f      	ldr	r1, [pc, #60]	; (8005b48 <UARTEx_SetNbDataToProcess+0x98>)
 8005b0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	7b7a      	ldrb	r2, [r7, #13]
 8005b1c:	4909      	ldr	r1, [pc, #36]	; (8005b44 <UARTEx_SetNbDataToProcess+0x94>)
 8005b1e:	5c8a      	ldrb	r2, [r1, r2]
 8005b20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b24:	7b7a      	ldrb	r2, [r7, #13]
 8005b26:	4908      	ldr	r1, [pc, #32]	; (8005b48 <UARTEx_SetNbDataToProcess+0x98>)
 8005b28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	08005be4 	.word	0x08005be4
 8005b48:	08005bec 	.word	0x08005bec

08005b4c <__libc_init_array>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4d0d      	ldr	r5, [pc, #52]	; (8005b84 <__libc_init_array+0x38>)
 8005b50:	4c0d      	ldr	r4, [pc, #52]	; (8005b88 <__libc_init_array+0x3c>)
 8005b52:	1b64      	subs	r4, r4, r5
 8005b54:	10a4      	asrs	r4, r4, #2
 8005b56:	2600      	movs	r6, #0
 8005b58:	42a6      	cmp	r6, r4
 8005b5a:	d109      	bne.n	8005b70 <__libc_init_array+0x24>
 8005b5c:	4d0b      	ldr	r5, [pc, #44]	; (8005b8c <__libc_init_array+0x40>)
 8005b5e:	4c0c      	ldr	r4, [pc, #48]	; (8005b90 <__libc_init_array+0x44>)
 8005b60:	f000 f820 	bl	8005ba4 <_init>
 8005b64:	1b64      	subs	r4, r4, r5
 8005b66:	10a4      	asrs	r4, r4, #2
 8005b68:	2600      	movs	r6, #0
 8005b6a:	42a6      	cmp	r6, r4
 8005b6c:	d105      	bne.n	8005b7a <__libc_init_array+0x2e>
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b74:	4798      	blx	r3
 8005b76:	3601      	adds	r6, #1
 8005b78:	e7ee      	b.n	8005b58 <__libc_init_array+0xc>
 8005b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7e:	4798      	blx	r3
 8005b80:	3601      	adds	r6, #1
 8005b82:	e7f2      	b.n	8005b6a <__libc_init_array+0x1e>
 8005b84:	08005bfc 	.word	0x08005bfc
 8005b88:	08005bfc 	.word	0x08005bfc
 8005b8c:	08005bfc 	.word	0x08005bfc
 8005b90:	08005c00 	.word	0x08005c00

08005b94 <memset>:
 8005b94:	4402      	add	r2, r0
 8005b96:	4603      	mov	r3, r0
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d100      	bne.n	8005b9e <memset+0xa>
 8005b9c:	4770      	bx	lr
 8005b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba2:	e7f9      	b.n	8005b98 <memset+0x4>

08005ba4 <_init>:
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	bf00      	nop
 8005ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005baa:	bc08      	pop	{r3}
 8005bac:	469e      	mov	lr, r3
 8005bae:	4770      	bx	lr

08005bb0 <_fini>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	bf00      	nop
 8005bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb6:	bc08      	pop	{r3}
 8005bb8:	469e      	mov	lr, r3
 8005bba:	4770      	bx	lr
